---
// src/pages/articles/_components/article-header.astro
import { Image, Picture } from "astro:assets";
import { formatDate, normalizeDate } from "@/lib/utils/date";
import ResourcesAdd from "@/assets/svgs/resources-add.astro";
import Time04 from "@/assets/svgs/time-04.astro";
import Calendar04 from "@/assets/svgs/calendar-04.astro";
import Divider from "@/components/bases/divider.astro";
import Share from "@/components/elements/share.astro";
import { urlFor } from "@/lib/sanity";

type Props = {
  article: {
    _id: string;
    title: string;
    description: string;
    slug: { current: string };
    cover?: any;
    publishedTime: string;
    categories?: Array<{
      title: string;
      slug: { current: string };
      parent?: {
        title: string;
        slug: { current: string };
      };
    }>;
    authors?: Array<{
      name: string;
      slug: { current: string };
      bio?: string;
      avatar?: any;
    }>;
  };
  readingTime: number;
};

const { article, readingTime } = Astro.props;

const category = article.categories?.[0];
const authors = article.authors || [];

// ✅ OPTIMISATION ÉTAPE 2 - Images responsives pour LCP
const generateCoverImages = (cover) => {
  if (!cover) return null;

  return {
    src: urlFor(cover).width(1200).height(600).quality(85).format("webp").url(),
    srcSet: [
      `${urlFor(cover).width(600).height(300).quality(85).format("webp").url()} 600w`,
      `${urlFor(cover).width(1200).height(600).quality(85).format("webp").url()} 1200w`,
      `${urlFor(cover).width(1800).height(900).quality(85).format("webp").url()} 1800w`,
    ].join(", "),
  };
};

const coverImages = generateCoverImages(article.cover);

// Fonction pour formater la date en dd/mm/yyyy avec timezone Jerusalem
const formatJerusalemDate = (dateString) => {
  const date = new Date(dateString);
  // Convertir en timezone de Jerusalem (Asia/Jerusalem)
  const jerusalemDate = new Date(
    date.toLocaleString("en-US", { timeZone: "Asia/Jerusalem" }),
  );

  const day = jerusalemDate.getDate().toString().padStart(2, "0");
  const month = (jerusalemDate.getMonth() + 1).toString().padStart(2, "0");
  const year = jerusalemDate.getFullYear();

  return `${day}/${month}/${year}`;
};
---

<section
  class="mb-8 flex flex-col lg:flex-col-reverse border-b border-b-base-300 lg:border-none pb-4 pt-0 lg:pt-6"
>
  <div
    class="container px-0 max-w-5xl lg:mt-4 overflow-hidden aspect-[20/9] rounded-md"
  >
    {
      coverImages && (
        <img
          src={coverImages.src}
          srcset={coverImages.srcSet}
          sizes="(max-width: 768px) 100vw, (max-width: 1200px) 90vw, 1200px"
          alt={article.title}
          loading="eager"
          fetchpriority="high"
          decoding="sync"
          width="1200"
          height="600"
          class="w-full h-full object-cover object-center"
        />
      )
    }
  </div>

  {
    category && (
      <div class="container my-4 max-w-5xl lg:hidden flex items-center gap-2">
        <ResourcesAdd size="16" />
        <a
          href={`/categories/${category.slug.current}`}
          class="a-01 font-semibold"
        >
          {category.title}
        </a>
      </div>
    )
  }

  <div class="container max-w-5xl">
    <h1 class="text-3xl lg:text-4xl font-bold text-right text-pretty">
      {article.title}
    </h1>
    <div class="flex flex-col gap-4 items-start mt-2 lg:mt-6 text-sm">
      <div class="text-base-content/70 flex items-center gap-2">
        {
          category && (
            <>
              <span class="hidden lg:flex items-center gap-1">
                <ResourcesAdd size="15" />
                <a
                  href={`/categories/${category.slug.current}`}
                  class="a-01 font-semibold"
                >
                  {category.title}
                </a>
              </span>
              <Divider responsive />
            </>
          )
        }

        <span class="flex items-center gap-1">
          <Calendar04 size="15" />
          <time datetime={normalizeDate(article.publishedTime)}>
            {formatJerusalemDate(article.publishedTime)}
          </time>
        </span>
        <Divider />
        <span class="flex items-center gap-1">
          <Time04 size="15" />
          <span>{readingTime} דק' קריאה</span>
        </span>
      </div>

      <div class="w-full flex flex-wrap gap-2 items-center justify-between">
        <div class="flex flex-wrap gap-4">
          {
            authors.map((author) => (
              <div class="flex items-center gap-2">
                <a
                  href={`/authors/${author.slug.current}`}
                  class="flex items-center gap-2"
                >
                  <div class="avatar">
                    <div class="w-8 rounded-full">
                      {author.avatar ? (
                        <img
                          src={urlFor(author.avatar)
                            .width(48)
                            .height(48)
                            .quality(85)
                            .format("webp")
                            .url()}
                          alt={author.name}
                          width="48"
                          height="48"
                          loading="lazy"
                          decoding="async"
                          class="rounded-full"
                        />
                      ) : (
                        <div class="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center">
                          <span class="text-xs font-bold">
                            {author.name.charAt(0).toUpperCase()}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                  <span class="font-bold capitalize">{author.name}</span>
                </a>
              </div>
            ))
          }
        </div>
        <Share text={article.title} />
      </div>
    </div>
  </div>
</section>
