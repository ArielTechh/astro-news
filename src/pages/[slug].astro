---
// src/pages/[slug].astro - Version hybride complète
import BaseLayout from "@/layouts/base.astro";
import ContentLayout from "@/layouts/content.astro";
import ArticleHeader from "@/pages/articles/_components/article-header.astro";
import { getAllArticles, getArticleBySlug, urlFor } from "@/lib/sanity";
import StructuredData from "@/components/seo/StructuredData.astro";
import Breadcrumbs from "@/components/navigation/Breadcrumbs.astro";
import { SITE } from "../lib/config/index.ts";
import RelatedArticles from "@/components/articles/RelatedArticles.astro";

export const getStaticPaths = async () => {
  const articles = await getAllArticles();

  return articles.map((article) => ({
    params: { slug: article.slug.current },
    props: { article },
  }));
};

const { article } = Astro.props;
const fullArticle = await getArticleBySlug(article.slug.current);

// ✅ FONCTIONS UTILITAIRES
const calculateReadingTime = (content) => {
  if (!content) return 1;
  let wordCount = 0;
  content.forEach((block) => {
    if (block._type === "block" && block.children) {
      block.children.forEach((child) => {
        if (child.text) {
          wordCount += child.text.split(" ").length;
        }
      });
    }
  });
  const wordsPerMinute = 200;
  return Math.ceil(wordCount / wordsPerMinute) || 1;
};

const getYouTubeId = (url) => {
  if (!url) return null;
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url.match(regExp);
  return match && match[2].length === 11 ? match[2] : null;
};

// ✅ DÉTECTEURS AUTOMATIQUES
const detectEmbeds = (text) => {
  // Twitter/X
  if (text.includes('<blockquote class="twitter-tweet">')) {
    return { type: "twitter", content: text };
  }

  // YouTube dans le texte (URL simple)
  const youtubeMatch = text.match(
    /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})/,
  );
  if (youtubeMatch) {
    return {
      type: "youtube-auto",
      videoId: youtubeMatch[1],
      url: youtubeMatch[0],
    };
  }

  // Instagram
  if (text.includes("instagram.com/p/") && text.includes("<blockquote")) {
    return { type: "instagram", content: text };
  }

  // TikTok
  if (text.includes("tiktok.com") && text.includes("<blockquote")) {
    return { type: "tiktok", content: text };
  }

  // Autres iframes génériques
  const iframeMatch = text.match(
    /<iframe[^>]*src="([^"]*)"[^>]*>.*?<\/iframe>/is,
  );
  if (iframeMatch) {
    return { type: "iframe", content: text, src: iframeMatch[1] };
  }

  return null;
};

const parseTable = (text) => {
  if (!text.includes("|") || !text.includes("---")) return null;
  const lines = text.split("\n").filter((line) => line.trim());
  const tableLines = lines.filter((line) => line.includes("|"));
  if (tableLines.length < 3) return null;

  const headerLine = tableLines[0];
  const separatorLine = tableLines[1];
  const dataLines = tableLines.slice(2);
  if (!separatorLine.includes("---")) return null;

  const headers = headerLine
    .split("|")
    .map((h) => h.trim())
    .filter((h) => h);
  const rows = dataLines.map((line) =>
    line
      .split("|")
      .map((cell) => cell.trim())
      .filter((cell) => cell),
  );

  return { headers, rows };
};

const readingTime = calculateReadingTime(fullArticle.content);
const canonicalUrl = `${SITE.url}/${article.slug.current}`;

const breadcrumbItems = [{ name: "בית", url: "/" }];

if (fullArticle.categories && fullArticle.categories.length > 0) {
  const category = fullArticle.categories[0];
  breadcrumbItems.push({
    name: category.title,
    url: `/categories/${category.slug.current}`,
  });
}

// breadcrumbItems.push({ name: "מאמרים", url: "/" });
---

<BaseLayout
  entry={fullArticle}
  article={fullArticle}
  readingTime={readingTime}
  canonical={canonicalUrl}
>
  <div class="container mx-auto px-4 max-w-5xl">
    <Breadcrumbs items={breadcrumbItems} current={fullArticle.title} />
  </div>

  <ArticleHeader article={fullArticle} readingTime={readingTime} />
  <ContentLayout>
    <div class="prose prose-lg lg:prose-2xl max-w-none">
      {
        fullArticle.content &&
          fullArticle.content.map((block, index) => {
            if (block._type === "block") {
              const fullText =
                block.children?.map((child) => child.text).join("") || "";

              // ✅ DÉTECTION AUTOMATIQUE D'EMBEDS
              const embedDetection = detectEmbeds(fullText);

              if (embedDetection) {
                switch (embedDetection.type) {
                  case "twitter":
                    return (
                      <div key={index} class="my-8">
                        <div
                          class="twitter-embed-container flex justify-center"
                          set:html={embedDetection.content}
                        />
                      </div>
                    );

                  case "youtube-auto":
                    return (
                      <div key={index} class="my-8">
                        <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-lg shadow-lg">
                          <iframe
                            class="absolute top-0 left-0 w-full h-full"
                            src={`https://www.youtube.com/embed/${embedDetection.videoId}?rel=0&modestbranding=1`}
                            title="Vidéo YouTube"
                            frameborder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowfullscreen
                            loading="lazy"
                          />
                        </div>
                        <p class="text-center text-sm text-gray-600 dark:text-gray-400 mt-2 italic">
                          Vidéo détectée automatiquement
                        </p>
                      </div>
                    );

                  case "instagram":
                  case "tiktok":
                    return (
                      <div key={index} class="my-8">
                        <div
                          class="social-embed-container flex justify-center"
                          set:html={embedDetection.content}
                        />
                      </div>
                    );

                  case "iframe":
                    return (
                      <div key={index} class="my-8">
                        <div
                          class="iframe-container"
                          set:html={embedDetection.content}
                        />
                      </div>
                    );
                }
              }

              // ✅ TABLEAUX
              const tableData = parseTable(fullText);
              if (tableData) {
                return (
                  <div
                    key={index}
                    class="overflow-x-auto my-6 w-full md:w-4/5 mx-auto"
                  >
                    <table class="min-w-full border border-gray-300 dark:border-gray-600">
                      <thead class="bg-gray-50 dark:bg-gray-800">
                        <tr>
                          {tableData.headers.map((header, headerIndex) => (
                            <th
                              key={headerIndex}
                              class="px-4 py-3 text-left text-sm font-semibold text-gray-900 dark:text-gray-100 border-b border-gray-300 dark:border-gray-600"
                            >
                              {header}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody class="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
                        {tableData.rows.map((row, rowIndex) => (
                          <tr
                            key={rowIndex}
                            class="hover:bg-gray-50 dark:hover:bg-gray-800"
                          >
                            {row.map((cell, cellIndex) => (
                              <td
                                key={cellIndex}
                                class="px-4 py-3 text-sm text-gray-800 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700"
                              >
                                {cell}
                              </td>
                            ))}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                );
              }

              // ✅ TEXTE FORMATÉ
              const textContent =
                block.children?.map((child) => {
                  let text = child.text || "";
                  if (child.marks?.includes("strong")) {
                    return <strong>{text}</strong>;
                  } else if (child.marks?.includes("em")) {
                    return <em>{text}</em>;
                  } else {
                    return text;
                  }
                }) || [];

              // ✅ STYLES DE BLOCS
              if (block.style === "h1") {
                return (
                  <h1
                    key={index}
                    class="text-3xl font-bold mt-10 mb-5 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h1>
                );
              } else if (block.style === "h2") {
                return (
                  <h2
                    key={index}
                    class="text-2xl font-semibold mt-8 mb-4 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h2>
                );
              } else if (block.style === "h3") {
                return (
                  <h3
                    key={index}
                    class="text-xl font-medium mt-6 mb-3 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h3>
                );
              } else if (block.style === "blockquote") {
                return (
                  <blockquote
                    key={index}
                    class="border-l-4 border-blue-500 pl-6 my-6 italic text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-800 py-4 rounded-r"
                  >
                    {textContent}
                  </blockquote>
                );
              } else {
                return (
                  <p
                    key={index}
                    class="mb-4 leading-relaxed text-gray-800 dark:text-gray-200"
                  >
                    {textContent}
                  </p>
                );
              }
            }

            // ✅ YOUTUBE avec SCHÉMA (plus d'options)
            if (block._type === "youtube") {
              const videoId = getYouTubeId(block.url);

              if (!videoId) {
                console.warn("URL YouTube invalide:", block.url);
                return null;
              }

              // Construire l'URL avec options
              let embedUrl = `https://www.youtube.com/embed/${videoId}?rel=0&modestbranding=1`;
              if (block.startTime) {
                embedUrl += `&start=${block.startTime}`;
              }

              return (
                <div key={index} class="my-8">
                  <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-lg shadow-lg">
                    <iframe
                      class="absolute top-0 left-0 w-full h-full"
                      src={embedUrl}
                      title={block.title || "Vidéo YouTube"}
                      frameborder="0"
                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                      allowfullscreen
                      loading="lazy"
                    />
                  </div>
                  {block.title && (
                    <p class="text-center text-sm text-gray-600 dark:text-gray-400 mt-2 font-medium">
                      {block.title}
                    </p>
                  )}
                </div>
              );
            }

            // ✅ IMAGES
            if (block._type === "image") {
              try {
                if (block.asset || block._ref) {
                  const imageSrcSet = [
                    `${urlFor(block).width(400).quality(85).format("webp").url()} 400w`,
                    `${urlFor(block).width(800).quality(85).format("webp").url()} 800w`,
                    `${urlFor(block).width(1200).quality(85).format("webp").url()} 1200w`,
                  ].join(", ");

                  const imageUrl = urlFor(block)
                    .width(800)
                    .quality(85)
                    .format("webp")
                    .url();

                  return (
                    <div key={index} class="my-8">
                      <img
                        src={imageUrl}
                        srcset={imageSrcSet}
                        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 800px"
                        alt={block.alt || "Image de l'article"}
                        class="w-full rounded-lg shadow-md"
                        loading="lazy"
                        width="800"
                        height="400"
                        decoding="async"
                      />
                    </div>
                  );
                }
              } catch (error) {
                console.warn("Erreur image:", error);
                return null;
              }
            }

            return null;
          })
      }
    </div>
  </ContentLayout>

  <RelatedArticles currentArticle={fullArticle} />
</BaseLayout>
