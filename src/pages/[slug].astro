---
// src/pages/[slug].astro - Version avec galeries d'images optimisées
import BaseLayout from "@/layouts/base.astro";
import ContentLayout from "@/layouts/content.astro";
import ArticleHeader from "@/pages/articles/_components/article-header.astro";
import YouTubeLazy from "@/components/media/YouTubeLazy.astro";
import TwitterLazy from "@/components/media/TwitterLazy.astro";
import { getAllArticles, getArticleBySlug, urlFor } from "@/lib/sanity";
import StructuredData from "@/components/seo/StructuredData.astro";
import Breadcrumbs from "@/components/navigation/Breadcrumbs.astro";
import { SITE } from "../lib/config/index.ts";
import RelatedArticles from "@/components/articles/RelatedArticles.astro";

// Import du système auto-linking
import {
  processPortableTextBlocks,
  previewAutoLinks,
} from "@/lib/auto-linking.ts";

export const getStaticPaths = async () => {
  const articles = await getAllArticles();
  return articles.map((article) => ({
    params: { slug: article.slug.current },
    props: { article },
  }));
};

const { article } = Astro.props;
const fullArticle = await getArticleBySlug(article.slug.current);

// Appliquer auto-linking au contenu
const processedContent = await processPortableTextBlocks(
  fullArticle.content,
  article.slug.current,
);

// Fonctions helpers pour SEO images
const getImageAlt = (image, articleTitle, fallback = "") => {
  if (image?.alt && image.alt.trim()) {
    return image.alt;
  }
  return fallback || articleTitle || "Image de l'article";
};

const getImageCaption = (image, articleTitle) => {
  if (image?.caption && image.caption.trim()) {
    return image.caption;
  }
  return "";
};

// Fonction pour optimiser les images de galerie
const getOptimizedGalleryImageProps = (imageBlock, size = "medium") => {
  const baseUrl = urlFor(imageBlock);

  const sizeConfigs = {
    small: { width: 400, quality: 75 },
    medium: { width: 600, quality: 75 },
    large: { width: 800, quality: 70 },
    xlarge: { width: 1200, quality: 65 },
  };

  const config = sizeConfigs[size] || sizeConfigs.medium;

  const sizes = [config.width, config.width * 1.5, config.width * 2];
  const srcSet = sizes
    .map(
      (width) =>
        `${baseUrl.width(width).quality(config.quality).format("webp").url()} ${width}w`,
    )
    .join(", ");

  return {
    src: baseUrl
      .width(config.width)
      .quality(config.quality)
      .format("webp")
      .url(),
    srcSet,
    sizes:
      size === "small"
        ? "(max-width: 640px) 100vw, 400px"
        : size === "medium"
          ? "(max-width: 768px) 100vw, 600px"
          : size === "large"
            ? "(max-width: 1024px) 100vw, 800px"
            : "(max-width: 1200px) 100vw, 1200px",
  };
};

// Fonctions utilitaires existantes
const calculateReadingTime = (content) => {
  if (!content) return 1;
  let wordCount = 0;
  content.forEach((block) => {
    if (block._type === "block" && block.children) {
      block.children.forEach((child) => {
        if (child.text) {
          wordCount += child.text.split(/\s+/).length;
        }
      });
    }
  });
  const wordsPerMinute = 200;
  return Math.ceil(wordCount / wordsPerMinute) || 1;
};

const getYouTubeId = (url) => {
  if (!url) return null;
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url.match(regExp);
  return match && match[2].length === 11 ? match[2] : null;
};

const extractTweetId = (html) => {
  if (!html) return null;
  const patterns = [
    /status\/(\d+)/,
    /twitter\.com\/\w+\/status\/(\d+)/,
    /data-tweet-id="(\d+)"/,
    /"tweet-id":"(\d+)"/,
  ];

  for (const pattern of patterns) {
    const match = html.match(pattern);
    if (match && match[1]) {
      return match[1];
    }
  }
  return null;
};

const convertMarkdownToHtml = (text) => {
  if (!text || typeof text !== "string") {
    return text;
  }

  let convertedText = text;
  convertedText = convertedText.replace(
    /\*\*(.*?)\*\*/g,
    "<strong>$1</strong>",
  );
  convertedText = convertedText.replace(/\*([^*]+)\*/g, "<em>$1</em>");
  return convertedText;
};

const detectEmbeds = (text) => {
  if (
    text.includes('<blockquote class="twitter-tweet">') ||
    text.includes("twitter.com/")
  ) {
    const tweetId = extractTweetId(text);
    if (tweetId) {
      return {
        type: "twitter-lazy",
        tweetId,
        embedHtml: text,
      };
    }
    return { type: "twitter-fallback", content: text };
  }

  const youtubeMatch = text.match(
    /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})/,
  );
  if (youtubeMatch) {
    return {
      type: "youtube-auto",
      videoId: youtubeMatch[1],
      url: youtubeMatch[0],
    };
  }

  if (text.includes("instagram.com/p/") && text.includes("<blockquote")) {
    return { type: "instagram", content: text };
  }

  if (text.includes("tiktok.com") && text.includes("<blockquote")) {
    return { type: "tiktok", content: text };
  }

  const iframeMatch = text.match(
    /<iframe[^>]*src="([^"]*)"[^>]*>.*?<\/iframe>/is,
  );
  if (iframeMatch) {
    return { type: "iframe", content: text, src: iframeMatch[1] };
  }

  return null;
};

const getOptimizedImageProps = (block) => {
  const baseUrl = urlFor(block);
  const sizes = [400, 800, 1200, 1600];
  const srcSet = sizes
    .map(
      (size) =>
        `${baseUrl.width(size).quality(70).format("webp").url()} ${size}w`,
    )
    .join(", ");

  return {
    src: baseUrl.width(800).quality(70).format("webp").url(),
    srcSet,
    sizes: "(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 800px",
  };
};

const parseTable = (text) => {
  if (!text.includes("|") || !text.includes("---")) return null;
  const lines = text.split("\n").filter((line) => line.trim());
  const tableLines = lines.filter((line) => line.includes("|"));
  if (tableLines.length < 3) return null;

  const headerLine = tableLines[0];
  const separatorLine = tableLines[1];
  const dataLines = tableLines.slice(2);
  if (!separatorLine.includes("---")) return null;

  const headers = headerLine
    .split("|")
    .map((h) => h.trim())
    .filter((h) => h);
  const rows = dataLines.map((line) =>
    line
      .split("|")
      .map((cell) => cell.trim())
      .filter((cell) => cell),
  );

  return { headers, rows };
};

const readingTime = calculateReadingTime(fullArticle.content);
const canonicalUrl = `${SITE.url}/${article.slug.current}`;

const breadcrumbItems = [{ name: "בית", url: "/" }];

if (fullArticle.categories && fullArticle.categories.length > 0) {
  const category = fullArticle.categories[0];
  breadcrumbItems.push({
    name: category.title,
    url: `/categories/${category.slug.current}`,
  });
}
---

<BaseLayout
  entry={fullArticle}
  article={fullArticle}
  readingTime={readingTime}
  canonical={canonicalUrl}
>
  <div class="container mx-auto px-3 sm:px-4 max-w-5xl">
    <Breadcrumbs items={breadcrumbItems} current={fullArticle.title} />
  </div>
  <ArticleHeader article={fullArticle} readingTime={readingTime} />
  <ContentLayout>
    <div class="prose prose-lg lg:prose-2xl max-w-none px-3 sm:px-0">
      {
        processedContent &&
          processedContent.map((block, index) => {
            // Traitement des blocs avec auto-linking
            if (block._type === "autoLinkedBlock") {
              return (
                <div
                  key={index}
                  class="mb-4 leading-relaxed text-gray-800 dark:text-gray-200 text-lg"
                  set:html={block.html}
                />
              );
            }

            // Galerie 2 images côte à côte
            if (block._type === "imageGallery2") {
              try {
                const leftImageProps = getOptimizedGalleryImageProps(
                  block.leftImage,
                  "medium",
                );
                const rightImageProps = getOptimizedGalleryImageProps(
                  block.rightImage,
                  "medium",
                );

                const leftAlt = getImageAlt(
                  block.leftImage,
                  fullArticle.title,
                  "Image de gauche",
                );
                const rightAlt = getImageAlt(
                  block.rightImage,
                  fullArticle.title,
                  "Image de droite",
                );

                const leftCaption = getImageCaption(
                  block.leftImage,
                  fullArticle.title,
                );
                const rightCaption = getImageCaption(
                  block.rightImage,
                  fullArticle.title,
                );

                const aspectRatioClass =
                  block.aspectRatio === "square"
                    ? "aspect-square"
                    : block.aspectRatio === "landscape"
                      ? "aspect-video"
                      : block.aspectRatio === "portrait"
                        ? "aspect-[3/4]"
                        : "aspect-auto";

                return (
                  <div key={index} class="my-8">
                    {block.title && (
                      <h3 class="text-lg font-semibold mb-4 text-center text-gray-800 dark:text-gray-200">
                        {block.title}
                      </h3>
                    )}

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <figure class="space-y-3">
                        <img
                          src={leftImageProps.src}
                          srcset={leftImageProps.srcSet}
                          sizes={leftImageProps.sizes}
                          alt={leftAlt}
                          class={`w-full rounded-lg shadow-md object-cover ${aspectRatioClass}`}
                          loading="lazy"
                          decoding="async"
                        />
                        {leftCaption && (
                          <figcaption class="text-sm text-gray-600 dark:text-gray-400 text-center italic">
                            {leftCaption}
                          </figcaption>
                        )}
                      </figure>

                      <figure class="space-y-3">
                        <img
                          src={rightImageProps.src}
                          srcset={rightImageProps.srcSet}
                          sizes={rightImageProps.sizes}
                          alt={rightAlt}
                          class={`w-full rounded-lg shadow-md object-cover ${aspectRatioClass}`}
                          loading="lazy"
                          decoding="async"
                        />
                        {rightCaption && (
                          <figcaption class="text-sm text-gray-600 dark:text-gray-400 text-center italic">
                            {rightCaption}
                          </figcaption>
                        )}
                      </figure>
                    </div>
                  </div>
                );
              } catch (error) {
                console.warn("Erreur galerie 2 images:", error);
                return null;
              }
            }

            // Galerie 2x2 (4 images)
            if (block._type === "imageGallery2x2") {
              try {
                if (!block.images || block.images.length < 2) {
                  return null;
                }

                const galleryImages = block.images.slice(0, 4);

                return (
                  <div key={index} class="my-8">
                    {block.title && (
                      <h3 class="text-lg font-semibold mb-6 text-center text-gray-800 dark:text-gray-200">
                        {block.title}
                      </h3>
                    )}

                    {block.layout === "grid-2-equal" && (
                      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {galleryImages.map((image, imgIndex) => {
                          const imageProps = getOptimizedGalleryImageProps(
                            image,
                            "medium",
                          );
                          const altText = getImageAlt(
                            image,
                            fullArticle.title,
                            `Image ${imgIndex + 1}`,
                          );
                          const captionText = getImageCaption(
                            image,
                            fullArticle.title,
                          );

                          return (
                            <figure key={imgIndex} class="space-y-3">
                              <img
                                src={imageProps.src}
                                srcset={imageProps.srcSet}
                                sizes={imageProps.sizes}
                                alt={altText}
                                class="w-full rounded-lg shadow-md aspect-auto object-cover"
                                loading="lazy"
                                decoding="async"
                              />
                              {captionText && (
                                <figcaption class="text-sm text-gray-600 dark:text-gray-400 text-center italic">
                                  {captionText}
                                </figcaption>
                              )}
                            </figure>
                          );
                        })}
                      </div>
                    )}

                    {block.layout === "grid-2-unequal" &&
                      galleryImages.length >= 2 && (
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <figure class="md:col-span-2 space-y-3">
                            {(() => {
                              const mainImage = galleryImages[0];
                              const imageProps = getOptimizedGalleryImageProps(
                                mainImage,
                                "large",
                              );
                              const altText = getImageAlt(
                                mainImage,
                                fullArticle.title,
                                "Image principale",
                              );
                              const captionText = getImageCaption(
                                mainImage,
                                fullArticle.title,
                              );

                              return (
                                <>
                                  <img
                                    src={imageProps.src}
                                    srcset={imageProps.srcSet}
                                    sizes={imageProps.sizes}
                                    alt={altText}
                                    class="w-full rounded-lg shadow-md aspect-video object-cover"
                                    loading="lazy"
                                    decoding="async"
                                  />
                                  {captionText && (
                                    <figcaption class="text-sm text-gray-600 dark:text-gray-400 text-center italic">
                                      {captionText}
                                    </figcaption>
                                  )}
                                </>
                              );
                            })()}
                          </figure>

                          <div class="space-y-4">
                            {galleryImages
                              .slice(1, 4)
                              .map((image, imgIndex) => {
                                const imageProps =
                                  getOptimizedGalleryImageProps(image, "small");
                                const altText = getImageAlt(
                                  image,
                                  fullArticle.title,
                                  `Image ${imgIndex + 2}`,
                                );
                                const captionText = getImageCaption(
                                  image,
                                  fullArticle.title,
                                );

                                return (
                                  <figure key={imgIndex} class="space-y-2">
                                    <img
                                      src={imageProps.src}
                                      srcset={imageProps.srcSet}
                                      sizes={imageProps.sizes}
                                      alt={altText}
                                      class="w-full rounded-lg shadow-md aspect-square object-cover"
                                      loading="lazy"
                                      decoding="async"
                                    />
                                    {captionText && (
                                      <figcaption class="text-xs text-gray-600 dark:text-gray-400 text-center italic">
                                        {captionText}
                                      </figcaption>
                                    )}
                                  </figure>
                                );
                              })}
                          </div>
                        </div>
                      )}

                    {block.layout === "grid-2x2" && (
                      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        {galleryImages.map((image, imgIndex) => {
                          const imageProps = getOptimizedGalleryImageProps(
                            image,
                            "medium",
                          );
                          const altText = getImageAlt(
                            image,
                            fullArticle.title,
                            `Image ${imgIndex + 1}`,
                          );
                          const captionText = getImageCaption(
                            image,
                            fullArticle.title,
                          );

                          return (
                            <figure key={imgIndex} class="space-y-3">
                              <img
                                src={imageProps.src}
                                srcset={imageProps.srcSet}
                                sizes={imageProps.sizes}
                                alt={altText}
                                class="w-full rounded-lg shadow-md aspect-square object-cover"
                                loading="lazy"
                                decoding="async"
                              />
                              {captionText && (
                                <figcaption class="text-sm text-gray-600 dark:text-gray-400 text-center italic">
                                  {captionText}
                                </figcaption>
                              )}
                            </figure>
                          );
                        })}
                      </div>
                    )}
                  </div>
                );
              } catch (error) {
                console.warn("Erreur galerie 2x2:", error);
                return null;
              }
            }

            // Traitement normal des blocs
            if (block._type === "block") {
              const fullText =
                block.children?.map((child) => child.text).join("") || "";

              const embedDetection = detectEmbeds(fullText);

              if (embedDetection) {
                switch (embedDetection.type) {
                  case "twitter-lazy":
                    return (
                      <TwitterLazy
                        key={index}
                        tweetId={embedDetection.tweetId}
                        embedHtml={embedDetection.embedHtml}
                      />
                    );

                  case "twitter-fallback":
                    return (
                      <div key={index} class="my-8">
                        <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-xl p-6 text-center">
                          <p class="text-yellow-800 dark:text-yellow-200 mb-4">
                            Embed Twitter détecté mais ID non trouvé
                          </p>
                        </div>
                      </div>
                    );

                  case "youtube-auto":
                    return (
                      <YouTubeLazy
                        key={index}
                        videoId={embedDetection.videoId}
                      />
                    );

                  case "instagram":
                  case "tiktok":
                    return (
                      <div key={index} class="my-8">
                        <div
                          class="social-embed-container flex justify-center [&>blockquote]:max-w-full"
                          set:html={embedDetection.content}
                        />
                      </div>
                    );

                  case "iframe":
                    return (
                      <div key={index} class="my-8">
                        <div
                          class="iframe-lazy-container bg-gray-100 dark:bg-gray-800 rounded-lg p-8 text-center cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                          data-iframe-src={embedDetection.src}
                        >
                          <div class="text-gray-600 dark:text-gray-400">
                            <p class="font-medium">
                              Cliquez pour charger le contenu intégré
                            </p>
                          </div>
                        </div>
                      </div>
                    );
                }
              }

              const tableData = parseTable(fullText);
              if (tableData) {
                return (
                  <div
                    key={index}
                    class="overflow-x-auto my-6 w-full md:w-4/5 mx-auto"
                  >
                    <table class="min-w-full border border-gray-300 dark:border-gray-600">
                      <thead class="bg-gray-50 dark:bg-gray-800">
                        <tr>
                          {tableData.headers.map((header, headerIndex) => (
                            <th
                              key={headerIndex}
                              class="px-4 py-3 text-left text-sm font-semibold text-gray-900 dark:text-gray-100 border-b border-gray-300 dark:border-gray-600"
                            >
                              {header}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody class="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
                        {tableData.rows.map((row, rowIndex) => (
                          <tr
                            key={rowIndex}
                            class="hover:bg-gray-50 dark:hover:bg-gray-800"
                          >
                            {row.map((cell, cellIndex) => (
                              <td
                                key={cellIndex}
                                class="px-4 py-3 text-sm text-gray-800 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700"
                              >
                                {cell}
                              </td>
                            ))}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                );
              }

              const textContent =
                block.children?.map((child, childIndex) => {
                  let text = child.text || "";
                  text = convertMarkdownToHtml(text);

                  if (child.marks && child.marks.length > 0) {
                    const linkMarkKey = child.marks.find((mark) => {
                      if (typeof mark === "string" && block.markDefs) {
                        const markDef = block.markDefs.find(
                          (def) => def._key === mark,
                        );
                        return markDef && markDef._type === "link";
                      }
                      return false;
                    });

                    if (linkMarkKey && block.markDefs) {
                      const markDef = block.markDefs.find(
                        (def) => def._key === linkMarkKey,
                      );
                      if (markDef && markDef.href) {
                        const href = markDef.href;
                        const isExternal = href.startsWith("http");

                        return (
                          <a
                            key={childIndex}
                            href={href}
                            target={isExternal ? "_blank" : "_self"}
                            rel={isExternal ? "noopener noreferrer" : ""}
                            class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 underline decoration-2 underline-offset-2 transition-colors text-lg"
                            set:html={text}
                          />
                        );
                      }
                    }
                  }

                  if (child.marks?.includes("strong")) {
                    return <strong key={childIndex} set:html={text} />;
                  } else if (child.marks?.includes("em")) {
                    return <em key={childIndex} set:html={text} />;
                  } else {
                    return <span key={childIndex} set:html={text} />;
                  }
                }) || [];

              if (block.style === "h1") {
                return (
                  <h1
                    key={index}
                    class="text-2xl sm:text-3xl font-bold mt-10 mb-5 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h1>
                );
              } else if (block.style === "h2") {
                return (
                  <h2
                    key={index}
                    class="text-xl sm:text-2xl font-semibold mt-8 mb-4 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h2>
                );
              } else if (block.style === "h3") {
                return (
                  <h3
                    key={index}
                    class="text-lg sm:text-xl font-medium mt-6 mb-3 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h3>
                );
              } else if (block.style === "blockquote") {
                return (
                  <blockquote
                    key={index}
                    class="border-l-4 border-blue-500 pl-4 sm:pl-6 my-6 italic text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-800 py-4 rounded-r text-lg"
                  >
                    {textContent}
                  </blockquote>
                );
              } else {
                return (
                  <p
                    key={index}
                    class="mb-4 leading-relaxed text-gray-800 dark:text-gray-200 text-lg"
                  >
                    {textContent}
                  </p>
                );
              }
            }

            // YouTube
            if (block._type === "youtube") {
              const videoId = getYouTubeId(block.url);
              if (!videoId) {
                console.warn("URL YouTube invalide:", block.url);
                return null;
              }

              return (
                <YouTubeLazy
                  key={index}
                  videoId={videoId}
                  title={block.title || "Vidéo YouTube"}
                  startTime={block.startTime}
                  class="my-8"
                />
              );
            }

            // Twitter
            if (block._type === "twitter") {
              return (
                <TwitterLazy
                  key={index}
                  tweetId={block.tweetId}
                  embedHtml={block.embedHtml}
                />
              );
            }

            // Images simples
            if (block._type === "image") {
              try {
                if (block.asset || block._ref) {
                  const imageProps = getOptimizedImageProps(block);
                  const altText = getImageAlt(block, fullArticle.title);
                  const captionText = getImageCaption(block, fullArticle.title);

                  return (
                    <figure key={index} class="my-8">
                      <img
                        src={imageProps.src}
                        srcset={imageProps.srcSet}
                        sizes={imageProps.sizes}
                        alt={altText}
                        class="w-full rounded-lg shadow-md"
                        loading="lazy"
                        decoding="async"
                        width="800"
                        height="400"
                      />
                      {captionText && (
                        <figcaption class="mt-3 text-sm text-gray-600 dark:text-gray-400 text-center italic">
                          {captionText}
                        </figcaption>
                      )}
                    </figure>
                  );
                }
              } catch (error) {
                console.warn("Erreur image:", error);
                return null;
              }
            }

            return null;
          })
      }
    </div>
  </ContentLayout>

  <RelatedArticles currentArticle={fullArticle} />
</BaseLayout>

<style>
  :global(.auto-link) {
    color: #2563eb;
    font-weight: 500;
    text-decoration: underline;
    text-decoration-style: dotted;
    text-decoration-color: #93c5fd;
    text-underline-offset: 2px;
    transition: all 0.2s ease;
  }

  :global(.dark .auto-link) {
    color: #60a5fa;
    text-decoration-color: #3b82f6;
  }

  :global(.auto-link:hover) {
    color: #1e40af;
    text-decoration-style: solid;
    text-decoration-thickness: 2px;
  }

  :global(.dark .auto-link:hover) {
    color: #93c5fd;
  }

  :global(.auto-link::after) {
    content: "🔗";
    font-size: 0.6em;
    margin-left: 2px;
    opacity: 0;
    transition: opacity 0.2s;
  }

  :global(.auto-link:hover::after) {
    opacity: 0.7;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const iframeLazyContainers = document.querySelectorAll(
      ".iframe-lazy-container",
    );

    iframeLazyContainers.forEach((container) => {
      container.addEventListener("click", function () {
        const iframeSrc = this.dataset.iframeSrc;
        if (iframeSrc) {
          const iframe = document.createElement("iframe");
          iframe.src = iframeSrc;
          iframe.className = "w-full h-64 rounded-lg";
          iframe.loading = "lazy";

          this.innerHTML = "";
          this.appendChild(iframe);
          this.classList.remove(
            "cursor-pointer",
            "hover:bg-gray-200",
            "dark:hover:bg-gray-700",
          );
        }
      });
    });

    // Script pour améliorer l'expérience des galeries
    const galleryImages = document.querySelectorAll("figure img");

    // Intersection Observer pour l'animation au scroll
    const imageObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.style.opacity = "1";
            entry.target.style.transform = "translateY(0)";
            imageObserver.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.1,
        rootMargin: "50px",
      },
    );

    galleryImages.forEach((img) => {
      img.style.opacity = "0";
      img.style.transform = "translateY(20px)";
      img.style.transition = "opacity 0.6s ease, transform 0.6s ease";
      imageObserver.observe(img);
    });
  });
</script>
