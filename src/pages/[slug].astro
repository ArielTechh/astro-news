---
// src/pages/[slug].astro - Version optimisée PageSpeed avec Twitter Lazy + Mobile
import BaseLayout from "@/layouts/base.astro";
import ContentLayout from "@/layouts/content.astro";
import ArticleHeader from "@/pages/articles/_components/article-header.astro";
import YouTubeLazy from "@/components/media/YouTubeLazy.astro";
import TwitterLazy from "@/components/media/TwitterLazy.astro";
import { getAllArticles, getArticleBySlug, urlFor } from "@/lib/sanity";
import StructuredData from "@/components/seo/StructuredData.astro";
import Breadcrumbs from "@/components/navigation/Breadcrumbs.astro";
import { SITE } from "../lib/config/index.ts";
import RelatedArticles from "@/components/articles/RelatedArticles.astro";

export const getStaticPaths = async () => {
  const articles = await getAllArticles();
  return articles.map((article) => ({
    params: { slug: article.slug.current },
    props: { article },
  }));
};

const { article } = Astro.props;
const fullArticle = await getArticleBySlug(article.slug.current);

// ✅ FONCTIONS UTILITAIRES (optimisées)
const calculateReadingTime = (content) => {
  if (!content) return 1;
  let wordCount = 0;
  content.forEach((block) => {
    if (block._type === "block" && block.children) {
      block.children.forEach((child) => {
        if (child.text) {
          wordCount += child.text.split(/\s+/).length;
        }
      });
    }
  });
  const wordsPerMinute = 200;
  return Math.ceil(wordCount / wordsPerMinute) || 1;
};

const getYouTubeId = (url) => {
  if (!url) return null;
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url.match(regExp);
  return match && match[2].length === 11 ? match[2] : null;
};

// ✅ FONCTION POUR EXTRAIRE L'ID TWITTER
const extractTweetId = (html) => {
  if (!html) return null;

  // Plusieurs patterns pour capturer l'ID du tweet
  const patterns = [
    /status\/(\d+)/,
    /twitter\.com\/\w+\/status\/(\d+)/,
    /data-tweet-id="(\d+)"/,
    /"tweet-id":"(\d+)"/,
  ];

  for (const pattern of patterns) {
    const match = html.match(pattern);
    if (match && match[1]) {
      return match[1];
    }
  }

  return null;
};

// ✅ DÉTECTEURS AUTOMATIQUES (optimisés avec Twitter lazy)
const detectEmbeds = (text) => {
  // Twitter - détection améliorée pour lazy loading
  if (
    text.includes('<blockquote class="twitter-tweet">') ||
    text.includes("twitter.com/")
  ) {
    const tweetId = extractTweetId(text);
    if (tweetId) {
      return {
        type: "twitter-lazy",
        tweetId,
        embedHtml: text,
      };
    }
    // Fallback pour les anciens embeds
    return { type: "twitter-fallback", content: text };
  }

  // YouTube - détection optimisée
  const youtubeMatch = text.match(
    /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})/,
  );
  if (youtubeMatch) {
    return {
      type: "youtube-auto",
      videoId: youtubeMatch[1],
      url: youtubeMatch[0],
    };
  }

  // Instagram (lazy load aussi)
  if (text.includes("instagram.com/p/") && text.includes("<blockquote")) {
    return { type: "instagram", content: text };
  }

  // TikTok (lazy load aussi)
  if (text.includes("tiktok.com") && text.includes("<blockquote")) {
    return { type: "tiktok", content: text };
  }

  // Autres iframes
  const iframeMatch = text.match(
    /<iframe[^>]*src="([^"]*)"[^>]*>.*?<\/iframe>/is,
  );
  if (iframeMatch) {
    return { type: "iframe", content: text, src: iframeMatch[1] };
  }

  return null;
};

// ✅ Fonction pour optimiser les images
const getOptimizedImageProps = (block) => {
  const baseUrl = urlFor(block);

  const sizes = [400, 800, 1200, 1600];
  const srcSet = sizes
    .map(
      (size) =>
        `${baseUrl.width(size).quality(85).format("webp").url()} ${size}w`,
    )
    .join(", ");

  return {
    src: baseUrl.width(800).quality(85).format("webp").url(),
    srcSet,
    sizes: "(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 800px",
  };
};

const parseTable = (text) => {
  if (!text.includes("|") || !text.includes("---")) return null;
  const lines = text.split("\n").filter((line) => line.trim());
  const tableLines = lines.filter((line) => line.includes("|"));
  if (tableLines.length < 3) return null;

  const headerLine = tableLines[0];
  const separatorLine = tableLines[1];
  const dataLines = tableLines.slice(2);
  if (!separatorLine.includes("---")) return null;

  const headers = headerLine
    .split("|")
    .map((h) => h.trim())
    .filter((h) => h);
  const rows = dataLines.map((line) =>
    line
      .split("|")
      .map((cell) => cell.trim())
      .filter((cell) => cell),
  );

  return { headers, rows };
};

const readingTime = calculateReadingTime(fullArticle.content);
const canonicalUrl = `${SITE.url}/${article.slug.current}`;

const breadcrumbItems = [{ name: "בית", url: "/" }];

if (fullArticle.categories && fullArticle.categories.length > 0) {
  const category = fullArticle.categories[0];
  breadcrumbItems.push({
    name: category.title,
    url: `/categories/${category.slug.current}`,
  });
}
---

<BaseLayout
  entry={fullArticle}
  article={fullArticle}
  readingTime={readingTime}
  canonical={canonicalUrl}
>
  <div class="container mx-auto px-3 sm:px-4 max-w-5xl">
    <Breadcrumbs items={breadcrumbItems} current={fullArticle.title} />
  </div>
  test
  <ArticleHeader article={fullArticle} readingTime={readingTime} />
  <ContentLayout>
    <div class="prose prose-lg lg:prose-2xl max-w-none px-3 sm:px-0">
      {
        fullArticle.content &&
          fullArticle.content.map((block, index) => {
            if (block._type === "block") {
              const fullText =
                block.children?.map((child) => child.text).join("") || "";

              // ✅ DÉTECTION AUTOMATIQUE D'EMBEDS (avec Twitter lazy)
              const embedDetection = detectEmbeds(fullText);

              if (embedDetection) {
                switch (embedDetection.type) {
                  case "twitter-lazy":
                    return (
                      <TwitterLazy
                        key={index}
                        tweetId={embedDetection.tweetId}
                        embedHtml={embedDetection.embedHtml}
                      />
                    );

                  case "twitter-fallback":
                    // Pour les anciens embeds sans ID détectable
                    return (
                      <div key={index} class="my-8">
                        <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-xl p-6 text-center">
                          <p class="text-yellow-800 dark:text-yellow-200 mb-4">
                            Embed Twitter détecté mais ID non trouvé
                          </p>
                          <details class="text-left">
                            <summary class="cursor-pointer text-sm text-yellow-600 dark:text-yellow-400 mb-2">
                              Voir le code embed original
                            </summary>
                            <pre class="bg-gray-100 dark:bg-gray-800 p-3 rounded text-xs overflow-x-auto">
                              {embedDetection.content}
                            </pre>
                          </details>
                        </div>
                      </div>
                    );

                  case "youtube-auto":
                    return (
                      <YouTubeLazy
                        key={index}
                        videoId={embedDetection.videoId}
                      />
                    );

                  case "instagram":
                  case "tiktok":
                    return (
                      <div key={index} class="my-8">
                        <div
                          class="social-embed-container flex justify-center [&>blockquote]:max-w-full"
                          set:html={embedDetection.content}
                        />
                      </div>
                    );

                  case "iframe":
                    return (
                      <div key={index} class="my-8">
                        <div
                          class="iframe-lazy-container bg-gray-100 dark:bg-gray-800 rounded-lg p-8 text-center cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                          data-iframe-src={embedDetection.src}
                        >
                          <div class="text-gray-600 dark:text-gray-400">
                            <svg
                              class="w-16 h-16 mx-auto mb-4"
                              fill="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z" />
                            </svg>
                            <p class="font-medium">
                              Cliquez pour charger le contenu intégré
                            </p>
                          </div>
                        </div>
                      </div>
                    );
                }
              }

              // ✅ TABLEAUX (inchangés)
              const tableData = parseTable(fullText);
              if (tableData) {
                return (
                  <div
                    key={index}
                    class="overflow-x-auto my-6 w-full md:w-4/5 mx-auto"
                  >
                    <table class="min-w-full border border-gray-300 dark:border-gray-600">
                      <thead class="bg-gray-50 dark:bg-gray-800">
                        <tr>
                          {tableData.headers.map((header, headerIndex) => (
                            <th
                              key={headerIndex}
                              class="px-4 py-3 text-left text-sm font-semibold text-gray-900 dark:text-gray-100 border-b border-gray-300 dark:border-gray-600"
                            >
                              {header}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody class="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
                        {tableData.rows.map((row, rowIndex) => (
                          <tr
                            key={rowIndex}
                            class="hover:bg-gray-50 dark:hover:bg-gray-800"
                          >
                            {row.map((cell, cellIndex) => (
                              <td
                                key={cellIndex}
                                class="px-4 py-3 text-sm text-gray-800 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700"
                              >
                                {cell}
                              </td>
                            ))}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                );
              }

              // ✅ TEXTE FORMATÉ avec LIENS + MOBILE
              const textContent =
                block.children?.map((child, childIndex) => {
                  let text = child.text || "";

                  // Gestion des liens
                  if (child.marks && child.marks.length > 0) {
                    // Chercher une marque de lien dans markDefs
                    const linkMarkKey = child.marks.find((mark) => {
                      if (typeof mark === "string" && block.markDefs) {
                        const markDef = block.markDefs.find(
                          (def) => def._key === mark,
                        );
                        return markDef && markDef._type === "link";
                      }
                      return false;
                    });

                    if (linkMarkKey && block.markDefs) {
                      const markDef = block.markDefs.find(
                        (def) => def._key === linkMarkKey,
                      );
                      if (markDef && markDef.href) {
                        const href = markDef.href;
                        const isExternal = href.startsWith("http");

                        // Combiner lien avec autres formatages
                        let content = text;
                        if (child.marks.includes("strong")) {
                          content = <strong>{content}</strong>;
                        }
                        if (child.marks.includes("em")) {
                          content = <em>{content}</em>;
                        }

                        return (
                          <a
                            key={childIndex}
                            href={href}
                            target={isExternal ? "_blank" : "_self"}
                            rel={isExternal ? "noopener noreferrer" : ""}
                            class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 underline decoration-2 underline-offset-2 transition-colors text-lg"
                          >
                            {content}
                          </a>
                        );
                      }
                    }
                  }

                  // Formatage sans lien
                  if (child.marks?.includes("strong")) {
                    return <strong key={childIndex}>{text}</strong>;
                  } else if (child.marks?.includes("em")) {
                    return <em key={childIndex}>{text}</em>;
                  } else {
                    return text;
                  }
                }) || [];

              // ✅ STYLES DE BLOCS (avec mobile)
              if (block.style === "h1") {
                return (
                  <h1
                    key={index}
                    class="text-2xl sm:text-3xl font-bold mt-10 mb-5 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h1>
                );
              } else if (block.style === "h2") {
                return (
                  <h2
                    key={index}
                    class="text-xl sm:text-2xl font-semibold mt-8 mb-4 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h2>
                );
              } else if (block.style === "h3") {
                return (
                  <h3
                    key={index}
                    class="text-lg sm:text-xl font-medium mt-6 mb-3 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h3>
                );
              } else if (block.style === "blockquote") {
                return (
                  <blockquote
                    key={index}
                    class="border-l-4 border-blue-500 pl-4 sm:pl-6 my-6 italic text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-800 py-4 rounded-r text-lg"
                  >
                    {textContent}
                  </blockquote>
                );
              } else {
                return (
                  <p
                    key={index}
                    class="mb-4 leading-relaxed text-gray-800 dark:text-gray-200 text-lg"
                  >
                    {textContent}
                  </p>
                );
              }
            }

            // ✅ YOUTUBE avec COMPOSANT LAZY
            if (block._type === "youtube") {
              const videoId = getYouTubeId(block.url);

              if (!videoId) {
                console.warn("URL YouTube invalide:", block.url);
                return null;
              }

              return (
                <YouTubeLazy
                  key={index}
                  videoId={videoId}
                  title={block.title || "Vidéo YouTube"}
                  startTime={block.startTime}
                  class="my-8"
                />
              );
            }

            // ✅ TWITTER avec COMPOSANT LAZY
            if (block._type === "twitter") {
              return (
                <TwitterLazy
                  key={index}
                  tweetId={block.tweetId}
                  embedHtml={block.embedHtml}
                />
              );
            }

            // ✅ IMAGES OPTIMISÉES
            if (block._type === "image") {
              try {
                if (block.asset || block._ref) {
                  const imageProps = getOptimizedImageProps(block);

                  return (
                    <div key={index} class="my-8">
                      <img
                        src={imageProps.src}
                        srcset={imageProps.srcSet}
                        sizes={imageProps.sizes}
                        alt={block.alt || "Image de l'article"}
                        class="w-full rounded-lg shadow-md"
                        loading="lazy"
                        decoding="async"
                        width="800"
                        height="400"
                      />
                    </div>
                  );
                }
              } catch (error) {
                console.warn("Erreur image:", error);
                return null;
              }
            }

            return null;
          })
      }
    </div>
  </ContentLayout>

  <RelatedArticles currentArticle={fullArticle} />
</BaseLayout>

<!-- Script pour les iframes lazy (inchangé) -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const iframeLazyContainers = document.querySelectorAll(
      ".iframe-lazy-container",
    );

    iframeLazyContainers.forEach((container) => {
      container.addEventListener("click", function () {
        const iframeSrc = this.dataset.iframeSrc;
        if (iframeSrc) {
          const iframe = document.createElement("iframe");
          iframe.src = iframeSrc;
          iframe.className = "w-full h-64 rounded-lg";
          iframe.loading = "lazy";

          this.innerHTML = "";
          this.appendChild(iframe);
          this.classList.remove(
            "cursor-pointer",
            "hover:bg-gray-200",
            "dark:hover:bg-gray-700",
          );
        }
      });
    });
  });
</script>
