---
// src/pages/[slug].astro
import BaseLayout from "@/layouts/base.astro";
import ContentLayout from "@/layouts/content.astro";
import ArticleHeader from "@/pages/articles/_components/article-header.astro";
import { getAllArticles, getArticleBySlug, urlFor } from "@/lib/sanity";
import StructuredData from "@/components/seo/StructuredData.astro";
import Breadcrumbs from "@/components/navigation/Breadcrumbs.astro";
import { SITE } from "../lib/config/index.ts";

export const getStaticPaths = async () => {
  const articles = await getAllArticles();

  return articles.map((article) => ({
    params: { slug: article.slug.current },
    props: { article },
  }));
};

const { article } = Astro.props;

// Récupérer l'article complet avec le contenu
const fullArticle = await getArticleBySlug(article.slug.current);

// Calcul approximatif du temps de lecture
const calculateReadingTime = (content) => {
  if (!content) return 1;

  let wordCount = 0;
  content.forEach((block) => {
    if (block._type === "block" && block.children) {
      block.children.forEach((child) => {
        if (child.text) {
          wordCount += child.text.split(" ").length;
        }
      });
    }
  });

  const wordsPerMinute = 200;
  return Math.ceil(wordCount / wordsPerMinute) || 1;
};

const readingTime = calculateReadingTime(fullArticle.content);
// ✅ Articles sans slash
const canonicalUrl = `${SITE.url}/${article.slug.current}`;

// Fonction pour parser un tableau Markdown
const parseTable = (text) => {
  if (!text.includes("|") || !text.includes("---")) return null;

  const lines = text.split("\n").filter((line) => line.trim());
  const tableLines = lines.filter((line) => line.includes("|"));

  if (tableLines.length < 3) return null;

  const headerLine = tableLines[0];
  const separatorLine = tableLines[1];
  const dataLines = tableLines.slice(2);

  if (!separatorLine.includes("---")) return null;

  const headers = headerLine
    .split("|")
    .map((h) => h.trim())
    .filter((h) => h);
  const rows = dataLines.map((line) =>
    line
      .split("|")
      .map((cell) => cell.trim())
      .filter((cell) => cell),
  );

  return { headers, rows };
};

// Créer les breadcrumbs pour l'article
const breadcrumbItems = [
  { name: "בית", url: "/" }, // "Accueil" en hébreu
];

// Ajouter la catégorie si elle existe
if (fullArticle.categories && fullArticle.categories.length > 0) {
  const category = fullArticle.categories[0];
  breadcrumbItems.push({
    name: category.title,
    url: `/categories/${category.slug.current}`,
  });
}

// Ajouter "מאמרים" (Articles)
breadcrumbItems.push({ name: "מאמרים", url: "/articles" });
---

<BaseLayout
  entry={fullArticle}
  article={fullArticle}
  readingTime={readingTime}
  canonical={canonicalUrl}
>
  <!-- Breadcrumbs alignés avec le container max-w-5xl -->
  <div class="container mx-auto px-4 max-w-5xl">
    <Breadcrumbs items={breadcrumbItems} current={fullArticle.title} />
  </div>

  <ArticleHeader article={fullArticle} readingTime={readingTime} />
  <ContentLayout>
    <div class="prose prose-lg lg:prose-2xl max-w-none">
      {
        fullArticle.content &&
          fullArticle.content.map((block, index) => {
            if (block._type === "block") {
              // Récupérer le texte complet du bloc
              const fullText =
                block.children?.map((child) => child.text).join("") || "";

              // Vérifier si c'est un tableau
              const tableData = parseTable(fullText);
              if (tableData) {
                return (
                  <div
                    key={index}
                    class="overflow-x-auto my-6 w-full md:w-4/5 mx-auto"
                  >
                    <table class="min-w-full border border-gray-300 dark:border-gray-600">
                      <thead class="bg-gray-50 dark:bg-gray-800">
                        <tr>
                          {tableData.headers.map((header, headerIndex) => (
                            <th
                              key={headerIndex}
                              class="px-4 py-3 text-left text-sm font-semibold text-gray-900 dark:text-gray-100 border-b border-gray-300 dark:border-gray-600"
                            >
                              {header}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody class="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
                        {tableData.rows.map((row, rowIndex) => (
                          <tr
                            key={rowIndex}
                            class="hover:bg-gray-50 dark:hover:bg-gray-800"
                          >
                            {row.map((cell, cellIndex) => (
                              <td
                                key={cellIndex}
                                class="px-4 py-3 text-sm text-gray-800 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700"
                              >
                                {cell}
                              </td>
                            ))}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                );
              }

              // Récupérer le contenu texte avec formatage
              const textContent =
                block.children?.map((child) => {
                  let text = child.text || "";

                  // Appliquer le formatage simple
                  if (child.marks?.includes("strong")) {
                    return <strong>{text}</strong>;
                  } else if (child.marks?.includes("em")) {
                    return <em>{text}</em>;
                  } else {
                    return text;
                  }
                }) || [];

              // Rendu basé sur le style
              if (block.style === "h1") {
                return (
                  <h1
                    key={index}
                    class="text-3xl font-bold mt-10 mb-5 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h1>
                );
              } else if (block.style === "h2") {
                return (
                  <h2
                    key={index}
                    class="text-2xl font-semibold mt-8 mb-4 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h2>
                );
              } else if (block.style === "h3") {
                return (
                  <h3
                    key={index}
                    class="text-xl font-medium mt-6 mb-3 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h3>
                );
              } else if (block.style === "h4") {
                return (
                  <h4
                    key={index}
                    class="text-lg font-medium mt-5 mb-2 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h4>
                );
              } else if (block.style === "h5") {
                return (
                  <h5
                    key={index}
                    class="text-base font-medium mt-4 mb-2 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h5>
                );
              } else if (block.style === "h6") {
                return (
                  <h6
                    key={index}
                    class="text-sm font-medium mt-3 mb-2 text-gray-900 dark:text-gray-100"
                  >
                    {textContent}
                  </h6>
                );
              } else if (block.style === "blockquote") {
                return (
                  <blockquote
                    key={index}
                    class="border-l-4 border-blue-500 pl-6 my-6 italic text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-800 py-4 rounded-r"
                  >
                    {textContent}
                  </blockquote>
                );
              } else {
                // Paragraphe normal
                return (
                  <p
                    key={index}
                    class="mb-4 leading-relaxed text-gray-800 dark:text-gray-200"
                  >
                    {textContent}
                  </p>
                );
              }
            }

            // ✨ IMAGES OPTIMISÉES - VERSION ULTRA PERFORMANTE
            if (block._type === "image") {
              try {
                // Vérifier que l'image a un asset valide
                if (block.asset || block._ref) {
                  // ✨ Alt text intelligent depuis Sanity
                  const altText =
                    block.alt ||
                    block.caption ||
                    `Image de l'article: ${fullArticle.title}` ||
                    "Image de l'article";

                  // ✨ Fonction pour générer les srcsets optimisés
                  const generateImageSrcSet = (baseImage, format = "webp") => {
                    return [
                      `${urlFor(baseImage).width(400).quality(85).format(format).url()} 400w`,
                      `${urlFor(baseImage).width(800).quality(85).format(format).url()} 800w`,
                      `${urlFor(baseImage).width(1200).quality(80).format(format).url()} 1200w`,
                      `${urlFor(baseImage).width(1600).quality(75).format(format).url()} 1600w`,
                    ].join(", ");
                  };

                  // ✨ Sources multiples pour compatibilité maximale
                  const avifSrcSet = generateImageSrcSet(block, "avif");
                  const webpSrcSet = generateImageSrcSet(block, "webp");
                  const jpegSrcSet = generateImageSrcSet(block, "jpg");

                  // Image par défaut optimisée
                  const defaultImageUrl = urlFor(block)
                    .width(800)
                    .quality(85)
                    .format("webp")
                    .url();

                  // ✨ Dimensions pour éviter layout shift
                  const imageWidth = 800;
                  const imageHeight = Math.round(imageWidth * 0.6); // Ratio 5:3

                  return (
                    <figure key={index} class="my-8 w-full">
                      <picture class="block w-full">
                        {/* ✨ AVIF - Format le plus moderne (~50% plus léger) */}
                        <source
                          srcset={avifSrcSet}
                          sizes="(max-width: 768px) 100vw, (max-width: 1200px) 85vw, 800px"
                          type="image/avif"
                        />

                        {/* ✨ WebP - Excellent compromis performance/compatibilité */}
                        <source
                          srcset={webpSrcSet}
                          sizes="(max-width: 768px) 100vw, (max-width: 1200px) 85vw, 800px"
                          type="image/webp"
                        />

                        {/* ✅ JPEG - Fallback pour anciens navigateurs */}
                        <source
                          srcset={jpegSrcSet}
                          sizes="(max-width: 768px) 100vw, (max-width: 1200px) 85vw, 800px"
                          type="image/jpeg"
                        />

                        {/* ✅ Image principale optimisée */}
                        <img
                          src={defaultImageUrl}
                          alt={altText}
                          class="w-full rounded-lg shadow-md transition-all duration-300 hover:shadow-lg hover:scale-[1.01]"
                          loading={index < 2 ? "eager" : "lazy"}
                          decoding="async"
                          width={imageWidth}
                          height={imageHeight}
                          style={`aspect-ratio: ${imageWidth}/${imageHeight}; opacity: 0; transition: opacity 0.3s ease-in-out;`}
                          onload="this.style.opacity='1'"
                          onerror="this.style.opacity='0.5'; this.alt='Image non disponible'"
                        />
                      </picture>

                      {/* ✨ Légende si disponible */}
                      {block.caption && (
                        <figcaption class="mt-3 text-sm text-gray-600 dark:text-gray-400 text-center italic leading-relaxed">
                          {block.caption}
                        </figcaption>
                      )}
                    </figure>
                  );
                } else {
                  // Image sans asset valide
                  console.warn("Image sans asset trouvée, ignorée:", block);
                  return null;
                }
              } catch (error) {
                // Gestion d'erreur gracieuse
                console.warn("Erreur lors du rendu de l'image:", error, block);
                return (
                  <div
                    key={index}
                    class="my-8 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg text-center text-gray-500"
                  >
                    <p>Image temporairement indisponible</p>
                  </div>
                );
              }
            }

            return null;
          })
      }
    </div>
  </ContentLayout>
</BaseLayout>
