---
// src/components/seo/StructuredData.astro - Version corrigée
import { urlFor } from "@/lib/sanity";

type Props = {
  article: {
    _id: string;
    title: string;
    description: string;
    slug: { current: string };
    cover?: any;
    publishedTime: string;
    content?: any[];
    categories?: Array<{
      title: string;
      slug: { current: string };
      parent?: {
        title: string;
        slug: { current: string };
      };
    }>;
    authors?: Array<{
      name: string;
      slug: { current: string };
      bio?: string;
      avatar?: any;
    }>;
    tags?: string[];
    uniqueLinkingKeyword?: string;
  };
  readingTime?: number;
  articleType?: "NewsArticle" | "Article" | "TechArticle" | "HowTo";
};

const { article, readingTime, articleType } = Astro.props;

// ✨ CONSTANTES DE CONFIGURATION
const MAX_IMAGES = 6;
const MAX_VIDEOS = 3;
const MAX_SOCIAL_POSTS = 3;
const siteUrl = "https://techhorizons.co.il";
const currentUrl = `${siteUrl}/${article.slug.current}`;

// ✅ FONCTIONS UTILITAIRES (consolidées)
const safeUrlFor = (asset) => {
  try {
    return asset ? urlFor(asset) : null;
  } catch (error) {
    console.warn("Erreur urlFor:", error);
    return null;
  }
};

const getImageAlt = (image, fallback = "Image de l'article") => {
  return image?.alt?.trim() || fallback;
};

const getImageCaption = (image, fallback = "") => {
  return image?.caption?.trim() || fallback;
};

const getYouTubeId = (url) => {
  if (!url) return null;
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url.match(regExp);
  return match && match[2].length === 11 ? match[2] : null;
};

const extractYouTubeFromText = (text) => {
  const match = text.match(
    /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})/,
  );
  return match ? match[1] : null;
};

const extractTweetId = (text) => {
  const match = text.match(/twitter\.com\/\w+\/status\/(\d+)/);
  return match ? match[1] : null;
};

// ✅ DÉTECTION DU TYPE D'ARTICLE (logique unifiée)
const detectArticleType = () => {
  // 1. Type explicitement fourni
  if (articleType) return articleType;

  // 2. Vérifier si c'est un article récent (NewsArticle)
  const twoDaysAgo = new Date();
  twoDaysAgo.setHours(twoDaysAgo.getHours() - 48);
  const publishedDate = new Date(article.publishedTime);
  const isRecentNews = publishedDate >= twoDaysAgo;

  // 3. Vérifier les catégories d'actualités
  const newsCategories = [
    "actualités",
    "news",
    "breaking",
    "tech-news",
    "innovation",
  ];
  const isNewsCategory = article.categories?.some((category) =>
    newsCategories.some(
      (newsType) =>
        category.slug?.current?.toLowerCase().includes(newsType) ||
        category.title?.toLowerCase().includes(newsType),
    ),
  );

  // 4. Si c'est de l'actualité récente
  if (isRecentNews || isNewsCategory) {
    return "NewsArticle";
  }

  // 5. Vérifier si c'est un tutoriel/guide
  const hasSpecialCategory = article.categories?.some(
    (category) => category._id === "c4bbd56e-97cb-46d6-8192-9884289e8872",
  );

  if (hasSpecialCategory) {
    const howToKeywords = ["איך", "כיצד", "מדריך", "שלבים", "הסבר", "לעשות"];
    const isHowTo = howToKeywords.some((keyword) =>
      article.title.toLowerCase().includes(keyword),
    );

    return isHowTo ? "HowTo" : "TechArticle";
  }

  // 6. Article générique par défaut
  return "Article";
};

// ✅ ANALYSE DU CONTENU (optimisée)
const analyzeContent = () => {
  if (!article.content) {
    return {
      videos: [],
      socialPosts: [],
      images: [],
      hasVideo: false,
      hasImages: false,
    };
  }

  const videos = [];
  const socialPosts = [];
  const images = [];

  // Image de couverture
  if (article.cover) {
    const coverUrlBuilder = safeUrlFor(article.cover);
    if (coverUrlBuilder) {
      const coverAlt = getImageAlt(article.cover, article.title);
      const coverCaption = getImageCaption(article.cover, article.title);

      images.push({
        "@type": "ImageObject",
        url: coverUrlBuilder.width(1200).height(630).url(),
        width: 1200,
        height: 630,
        caption: coverCaption,
        contentUrl: coverUrlBuilder.url(),
        name: coverAlt,
        alternateName: article.title,
        description: coverCaption,
        encodingFormat: "image/webp",
        thumbnail: {
          "@type": "ImageObject",
          url: coverUrlBuilder.width(400).height(300).url(),
        },
      });
    }
  }

  // Analyser le contenu
  article.content.forEach((block) => {
    // Images dans le contenu
    if (
      block._type === "image" &&
      (block.asset || block._ref) &&
      images.length < MAX_IMAGES
    ) {
      const imageUrlBuilder = safeUrlFor(block);
      if (imageUrlBuilder) {
        const imageAlt = getImageAlt(block, article.title);
        const imageCaption = getImageCaption(block, article.title);

        images.push({
          "@type": "ImageObject",
          url: imageUrlBuilder.width(1200).url(),
          contentUrl: imageUrlBuilder.url(),
          name: imageAlt,
          alternateName: article.title,
          caption: imageCaption,
          description: imageCaption,
          encodingFormat: "image/webp",
          thumbnail: {
            "@type": "ImageObject",
            url: imageUrlBuilder.width(400).height(300).url(),
          },
        });
      }
    }

    // Vidéos YouTube
    if (block._type === "youtube" && block.url && videos.length < MAX_VIDEOS) {
      const videoId = getYouTubeId(block.url);
      if (videoId) {
        videos.push({
          "@type": "VideoObject",
          name: block.title || article.title,
          description:
            block.description || article.description || article.title,
          thumbnailUrl: `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`,
          embedUrl: `https://www.youtube.com/embed/${videoId}`,
          uploadDate: article.publishedTime,
          publisher: {
            "@type": "Organization",
            name: "YouTube",
            url: "https://www.youtube.com",
          },
        });
      }
    }

    // Analyser les blocs texte
    if (block._type === "block" && block.children) {
      const fullText = block.children.map((child) => child.text || "").join("");

      // YouTube dans le texte
      if (videos.length < MAX_VIDEOS) {
        const youtubeId = extractYouTubeFromText(fullText);
        if (youtubeId) {
          videos.push({
            "@type": "VideoObject",
            name: article.title,
            description: article.description || article.title,
            thumbnailUrl: `https://img.youtube.com/vi/${youtubeId}/maxresdefault.jpg`,
            embedUrl: `https://www.youtube.com/embed/${youtubeId}`,
            uploadDate: article.publishedTime,
            publisher: {
              "@type": "Organization",
              name: "YouTube",
              url: "https://www.youtube.com",
            },
          });
        }
      }

      // Twitter dans le texte
      if (socialPosts.length < MAX_SOCIAL_POSTS) {
        const tweetId = extractTweetId(fullText);
        if (tweetId) {
          socialPosts.push({
            "@type": "SocialMediaPosting",
            url: `https://twitter.com/i/status/${tweetId}`,
            headline: "Tweet intégré",
            author: {
              "@type": "Organization",
              name: "Twitter",
              url: "https://twitter.com",
            },
          });
        }
      }
    }
  });

  return {
    videos,
    socialPosts,
    images,
    hasVideo: videos.length > 0,
    hasImages: images.length > 0,
  };
};

// ✅ SCHÉMAS ET DONNÉES
const contentAnalysis = analyzeContent();
const detectedType = detectArticleType();

// Image de couverture par défaut
const defaultImageUrl = `${siteUrl}/techh_logo.webp`;
const defaultImageAlt = "Logo TechHorizons";

// Auteurs
const authors = article.authors || [];
const authorsSchema = authors.map((author) => ({
  "@type": "Person",
  name: author.name,
  url: `${siteUrl}/authors/${author.slug.current}`,
  ...(author.avatar && {
    image: safeUrlFor(author.avatar)?.width(400).height(400).url(),
  }),

  ...(author.bio && {
    sameAs: [
      // Ici tu peux mapper depuis Sanity si tu stockes leurs réseaux sociaux
      // Exemple statique :
      `https://twitter.com/${author.slug.current}`,
    ],
  }),
}));

// Organisation
const organization = {
  "@type": "NewsMediaOrganization",
  "@id": `${siteUrl}/#publisher`,
  name: "TechHorizons",
  url: siteUrl,
  logo: {
    "@type": "ImageObject",
    url: defaultImageUrl,
    width: 300,
    height: 300,
  },
};

// Catégorie principale
const mainCategory = article.categories?.[0];

// Mots-clés consolidés
const keywords = [
  ...(article.tags || []),
  ...(article.categories?.map((cat) => cat.title) || []),
  ...(article.uniqueLinkingKeyword ? [article.uniqueLinkingKeyword] : []),
]
  .filter(Boolean)
  .join(", ");

// ✅ SCHÉMA PRINCIPAL UNIFIÉ
const createMainSchema = () => {
  const baseSchema = {
    "@context": "https://schema.org",
    "@type": detectedType,
    headline: article.title,
    description: article.description || article.title,
    url: currentUrl,
    datePublished: article.publishedTime,
    dateModified: article.publishedTime,
    author: authorsSchema.length > 0 ? authorsSchema : organization,
    publisher: organization,
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": currentUrl,
    },
    inLanguage: "he-IL",
    isAccessibleForFree: true,
    wordCount: article.content
      ? article.content
          .map((block) => block.children?.map((c) => c.text).join(" ") || "")
          .join(" ")
          .split(/\s+/).length
      : undefined,
  };

  // Image principale
  if (contentAnalysis.hasImages && contentAnalysis.images.length > 0) {
    baseSchema.image = contentAnalysis.images;
  } else {
    baseSchema.image = {
      "@type": "ImageObject",
      url: defaultImageUrl,
      name: defaultImageAlt,
      alternateName: article.title,
    };
  }

  // Vidéos
  if (contentAnalysis.hasVideo) {
    baseSchema.video = contentAnalysis.videos;
  }

  // Posts sociaux
  if (contentAnalysis.socialPosts.length > 0) {
    baseSchema.mentions = contentAnalysis.socialPosts;
  }

  // Propriétés spécifiques selon le type
  switch (detectedType) {
    case "NewsArticle":
      return {
        ...baseSchema,
        articleSection: mainCategory?.title || "Technology",
        keywords,
        ...(readingTime && { timeRequired: `PT${readingTime}M` }),
      };

    case "HowTo":
      return {
        ...baseSchema,
        "@type": "HowTo",
        name: article.title,
        // Remove headline for HowTo
        headline: undefined,
      };

    case "TechArticle":
      return {
        ...baseSchema,
        genre: "Technology",
        keywords: mainCategory?.title || "Technology",
        ...(readingTime && { timeRequired: `PT${readingTime}M` }),
      };

    default:
      return {
        ...baseSchema,
        ...(readingTime && { timeRequired: `PT${readingTime}M` }),
      };
  }
};

const mainSchema = createMainSchema();

// ✅ SCHÉMA DE LA PAGE WEB
const webPageSchema = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "@id": currentUrl,
  url: currentUrl,
  name: article.title,
  description: article.description || article.title,
  inLanguage: "he-IL",
  isPartOf: {
    "@type": "WebSite",
    "@id": siteUrl,
    name: "TechHorizons",
    url: siteUrl,
  },
  primaryImageOfPage:
    contentAnalysis.hasImages && contentAnalysis.images.length > 0
      ? contentAnalysis.images[0]
      : {
          "@type": "ImageObject",
          url: defaultImageUrl,
          name: defaultImageAlt,
          alternateName: article.title,
        },
  ...(contentAnalysis.hasVideo && { video: contentAnalysis.videos }),
};

// ✅ SCHÉMA BREADCRUMB
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: "Accueil",
      item: siteUrl,
    },
    ...(mainCategory
      ? [
          {
            "@type": "ListItem",
            position: 2,
            name: mainCategory.title,
            item: `${siteUrl}/categories/${mainCategory.slug.current}`,
          },
        ]
      : []),
    {
      "@type": "ListItem",
      position: mainCategory ? 3 : 2,
      name: article.title,
      item: currentUrl,
    },
  ],
};

// ✅ SCHÉMAS ADDITIONNELS
const additionalSchemas = [];

// Galerie d'images (si plus de 3 images)
if (contentAnalysis.images.length > 3) {
  additionalSchemas.push({
    "@context": "https://schema.org",
    "@type": "ImageGallery",
    name: `Images de l'article: ${article.title}`,
    description: `Galerie d'images de l'article "${article.title}"`,
    url: currentUrl,
    image: contentAnalysis.images,
  });
}

// Schémas individuels pour les vidéos
contentAnalysis.videos.forEach((video) => {
  additionalSchemas.push({
    "@context": "https://schema.org",
    "@type": "VideoObject",
    ...video,
    isPartOf: {
      "@type": "Article",
      "@id": currentUrl,
    },
  });
});
---

<!-- ✅ SCHÉMA PRINCIPAL -->
<script type="application/ld+json" set:html={JSON.stringify(mainSchema)} />

<!-- ✅ SCHÉMA DE LA PAGE WEB -->
<script type="application/ld+json" set:html={JSON.stringify(webPageSchema)} />

<!-- ✅ SCHÉMA BREADCRUMB -->
<script
  type="application/ld+json"
  set:html={JSON.stringify(breadcrumbSchema)}
/>

<!-- ✅ SCHÉMAS ADDITIONNELS -->{
  additionalSchemas.map((schema, index) => (
    <script
      key={index}
      type="application/ld+json"
      set:html={JSON.stringify(schema)}
    />
  ))
}

<!-- ✅ META TAGS POUR VIDÉOS -->
{
  contentAnalysis.hasVideo && contentAnalysis.videos[0] && (
    <>
      <meta property="og:video" content={contentAnalysis.videos[0].embedUrl} />
      <meta property="og:video:type" content="text/html" />
      <meta property="og:video:width" content="1280" />
      <meta property="og:video:height" content="720" />
      <meta
        name="twitter:player"
        content={contentAnalysis.videos[0].embedUrl}
      />
      <meta name="twitter:player:width" content="1280" />
      <meta name="twitter:player:height" content="720" />
    </>
  )
}

<!-- ✅ META TAGS POUR IMAGES -->
{
  contentAnalysis.hasImages &&
    contentAnalysis.images.slice(0, 4).map((img, index) => (
      <Fragment key={`meta-img-${index}`}>
        <meta property="og:image" content={img.url} />
        <meta property="og:image:alt" content={img.name} />
        {index === 0 && (
          <>
            <meta property="twitter:image" content={img.url} />
            <meta property="twitter:image:alt" content={img.name} />
          </>
        )}
      </Fragment>
    ))
}

<!-- ✅ META TAGS TWITTER CARDS -->
<meta
  name="twitter:card"
  content={contentAnalysis.hasVideo ? "player" : "summary_large_image"}
/>
<meta name="twitter:site" content="@techhorizons" />
<meta
  name="twitter:creator"
  content={authorsSchema.length > 0
    ? `@${authorsSchema[0].name}`
    : "@techhorizons"}
/>
<meta name="twitter:title" content={article.title} />
<meta
  name="twitter:description"
  content={article.description || article.title}
/>
<meta name="twitter:url" content={currentUrl} />

<!-- Twitter: Date de publication -->
<meta name="twitter:label1" content="Publié le" />
<meta
  name="twitter:data1"
  content={new Date(article.publishedTime).toLocaleDateString("fr-FR")}
/>

<!-- Twitter: Temps de lecture -->
{
  readingTime && (
    <>
      <meta name="twitter:label2" content="Temps de lecture" />
      <meta name="twitter:data2" content={`${readingTime} min`} />
    </>
  )
}
