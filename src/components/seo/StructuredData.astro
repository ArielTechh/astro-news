---
// src/components/seo/StructuredData.astro
import { urlFor } from "@/lib/sanity";

type Props = {
  article: {
    _id: string;
    title: string;
    description: string;
    slug: { current: string };
    cover?: any;
    publishedTime: string;
    content?: any[]; // ✅ AJOUT : Pour analyser le contenu
    categories?: Array<{
      title: string;
      slug: { current: string };
      parent?: {
        title: string;
        slug: { current: string };
      };
    }>;
    authors?: Array<{
      name: string;
      slug: { current: string };
      bio?: string;
      avatar?: any;
    }>;
  };
  readingTime?: number;
  articleType?: "NewsArticle" | "Article" | "TechArticle" | "HowTo";
};

const { article, readingTime, articleType } = Astro.props;

// ✅ FONCTIONS UTILITAIRES POUR ANALYSER LE CONTENU
const getYouTubeId = (url) => {
  if (!url) return null;
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url.match(regExp);
  return (match && match[2].length === 11) ? match[2] : null;
};

const extractYouTubeFromText = (text) => {
  const match = text.match(/(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})/);
  return match ? match[1] : null;
};

const extractTweetId = (text) => {
  const match = text.match(/twitter\.com\/\w+\/status\/(\d+)/);
  return match ? match[1] : null;
};

// ✅ ANALYSER LE CONTENU POUR EXTRAIRE LES MÉDIAS
const analyzeContent = () => {
  if (!article.content) return { videos: [], socialPosts: [], hasVideo: false };
  
  const videos = [];
  const socialPosts = [];
  
  article.content.forEach((block, index) => {
    // Vidéos YouTube avec schéma
    if (block._type === "youtube" && block.url) {
      const videoId = getYouTubeId(block.url);
      if (videoId) {
        videos.push({
          "@type": "VideoObject",
          name: block.title || article.title,
          description: block.title || article.description || article.title,
          thumbnailUrl: `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`,
          embedUrl: `https://www.youtube.com/embed/${videoId}`,
          uploadDate: article.publishedTime,
          // duration: "PT0M", 
          publisher: {
            "@type": "Organization",
            name: "YouTube",
            url: "https://www.youtube.com"
          }
        });
      }
    }
    
    // Analyser les blocs texte pour YouTube et Twitter
    if (block._type === "block" && block.children) {
      const fullText = block.children.map(child => child.text).join("");
      
      // YouTube dans le texte
      const youtubeId = extractYouTubeFromText(fullText);
      if (youtubeId) {
        videos.push({
          "@type": "VideoObject",
          name: article.title,
          description: article.description || article.title,
          thumbnailUrl: `https://img.youtube.com/vi/${youtubeId}/maxresdefault.jpg`,
          embedUrl: `https://www.youtube.com/embed/${youtubeId}`,
          uploadDate: article.publishedTime,
          // duration: "PT0M",
          publisher: {
            "@type": "Organization",
            name: "YouTube",
            url: "https://www.youtube.com"
          }
        });
      }
      
      // Twitter dans le texte
      const tweetId = extractTweetId(fullText);
      if (tweetId) {
        socialPosts.push({
          "@type": "SocialMediaPosting",
          url: `https://twitter.com/i/status/${tweetId}`,
          headline: "Tweet intégré",
          datePublished: article.publishedTime,
          author: {
            "@type": "Organization",
            name: "Twitter",
            url: "https://twitter.com"
          }
        });
      }
    }
  });
  
  return { 
    videos: videos.slice(0, 5), // Limiter à 5 vidéos max
    socialPosts: socialPosts.slice(0, 3), // Limiter à 3 posts sociaux max
    hasVideo: videos.length > 0 
  };
};

const contentAnalysis = analyzeContent();

// Logique de détection automatique du type d'article
const detectArticleType = () => {
  if (articleType) return articleType;

  const hasSpecialCategory = article.categories?.some(
    (category) => category._id === "c4bbd56e-97cb-46d6-8192-9884289e8872",
  );

  if (hasSpecialCategory) {
    const howToKeywords = ["איך", "כיצד", "מדריך", "שלבים", "הסבר", "לעשות"];
    const isHowTo = howToKeywords.some((keyword) =>
      article.title.toLowerCase().includes(keyword),
    );

    return isHowTo ? "HowTo" : "TechArticle";
  }

  return "NewsArticle";
};

const detectedType = detectArticleType();

const siteUrl = "https://techhorizons.co.il";
const currentUrl = `${siteUrl}/${article.slug.current}`; // ✅ CORRIGÉ : pas /articles/

// Image de couverture
const coverImageUrl = article.cover
  ? urlFor(article.cover).width(1200).height(630).url()
  : `${siteUrl}/techh_logo.webp`;

// Auteurs
const authors = article.authors || [];
const authorsSchema = authors.map((author) => ({
  "@type": "Person",
  name: author.name,
  url: `${siteUrl}/authors/${author.slug.current}`,
  ...(author.avatar && {
    image: urlFor(author.avatar).width(400).height(400).url(),
  }),
}));

// Catégorie principale
const mainCategory = article.categories?.[0];

// Organisation
const organization = {
  "@type": "Organization",
  name: "TechHorizons",
  url: siteUrl,
  logo: {
    "@type": "ImageObject",
    url: `${siteUrl}/techh_logo.webp`,
    width: 300,
    height: 300,
  },
};

// ✅ SCHEMA DE BASE AMÉLIORÉ
const baseSchema = {
  "@context": "https://schema.org",
  "@type": detectedType,
  headline: article.title,
  description: article.description || article.title,
  url: currentUrl,
  datePublished: article.publishedTime,
  dateModified: article.publishedTime,
  author: authorsSchema.length > 0 ? authorsSchema : organization,
  publisher: organization,
  image: {
    "@type": "ImageObject",
    url: coverImageUrl,
    width: 1200,
    height: 630,
  },
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": currentUrl,
  },
  // ✅ AJOUTER LES VIDÉOS SI PRÉSENTES
  ...(contentAnalysis.hasVideo && {
    video: contentAnalysis.videos
  }),
  // ✅ AJOUTER LES POSTS SOCIAUX SI PRÉSENTS
  ...(contentAnalysis.socialPosts.length > 0 && {
    mentions: contentAnalysis.socialPosts
  })
};

// Ajouts spécifiques selon le type d'article
let schema = { ...baseSchema };

if (detectedType === "NewsArticle") {
  schema = {
    ...schema,
    articleSection: mainCategory?.title || "Technology",
    inLanguage: "he-IL",
    ...(readingTime && {
      timeRequired: `PT${readingTime}M`,
    }),
  };
}

if (detectedType === "HowTo") {
  schema["@type"] = "HowTo";
  schema.name = article.title;
  delete schema.headline;
  
  // ✅ AJOUT : Structure spéciale pour les tutoriels avec vidéos
  if (contentAnalysis.hasVideo) {
    schema.video = contentAnalysis.videos;
  }
}

if (detectedType === "TechArticle") {
  schema = {
    ...schema,
    genre: "Technology",
    keywords: mainCategory?.title || "Technology",
    inLanguage: "he-IL",
    ...(readingTime && {
      timeRequired: `PT${readingTime}M`,
    }),
  };
}

// ✅ SCHÉMAS ADDITIONNELS POUR LES VIDÉOS (si présentes)
const additionalSchemas = [];

// Schema spécifique pour chaque vidéo YouTube
if (contentAnalysis.videos.length > 0) {
  contentAnalysis.videos.forEach((video, index) => {
    additionalSchemas.push({
      "@context": "https://schema.org",
      "@type": "VideoObject",
      ...video,
      isPartOf: {
        "@type": "Article",
        "@id": currentUrl
      }
    });
  });
}

// ✅ SCHEMA POUR LA PAGE WEB ELLE-MÊME
const webPageSchema = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "@id": currentUrl,
  url: currentUrl,
  name: article.title,
  description: article.description || article.title,
  inLanguage: "he-IL",
  isPartOf: {
    "@type": "WebSite",
    "@id": siteUrl,
    name: "TechHorizons",
    url: siteUrl
  },
  primaryImageOfPage: {
    "@type": "ImageObject",
    url: coverImageUrl
  },
  datePublished: article.publishedTime,
  dateModified: article.publishedTime,
  ...(contentAnalysis.hasVideo && {
    video: contentAnalysis.videos
  })
};

// ✅ SCHEMA FINAL COMBINÉ
const allSchemas = [
  schema, // Article principal
  webPageSchema, // Page web
  ...additionalSchemas // Vidéos individuelles
];
---

<!-- ✅ SCHEMA PRINCIPAL -->
<script type="application/ld+json" set:html={JSON.stringify(schema)} />

<!-- ✅ SCHEMA DE LA PAGE WEB -->
<script type="application/ld+json" set:html={JSON.stringify(webPageSchema)} />

<!-- ✅ SCHÉMAS DES VIDÉOS INDIVIDUELLES -->
{additionalSchemas.map((videoSchema, index) => (
  <script key={index} type="application/ld+json" set:html={JSON.stringify(videoSchema)} />
))}

<!-- ✅ META TAGS ADDITIONNELS POUR LES VIDÉOS -->
{contentAnalysis.hasVideo && (
  <>
    <meta property="og:video" content={contentAnalysis.videos[0].embedUrl} />
    <meta property="og:video:type" content="text/html" />
    <meta property="og:video:width" content="1280" />
    <meta property="og:video:height" content="720" />
    <meta name="twitter:player" content={contentAnalysis.videos[0].embedUrl} />
    <meta name="twitter:player:width" content="1280" />
    <meta name="twitter:player:height" content="720" />
  </>
)}

<!-- ✅ DEBUG INFO (à retirer en production) -->
{import.meta.env.DEV && (
  <script>
    console.log('📊 Structured Data Debug:', {
      articleType: detectedType,
      hasVideos: contentAnalysis.hasVideo,
      videosCount: contentAnalysis.videos.length,
      socialPostsCount: contentAnalysis.socialPosts.length,
      schemas: allSchemas.length
    });
  </script>
)}