---
import "@/styles/global.css";
import { ClientRouter } from "astro:transitions";
import { SITE } from "@/lib/config";
import type { ArticleMeta, Meta } from "@/lib/types";
import StructuredData from "@/components/seo/StructuredData.astro";
import { SEO } from "astro-seo";

type Props = {
  meta: Meta | ArticleMeta;
  article?: any;
  readingTime?: number;
  canonical?: string;
};

const { meta, article, readingTime, canonical } = Astro.props;

const isArticleMeta = (props: Props["meta"]): props is ArticleMeta =>
  props.type === "article";
const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site).href;

const OGImage = new URL(meta.ogImage, Astro.url).href;
---

<head>
  <!-- âœ… CHARSET EN PREMIER - OBLIGATOIRE -->
  <meta charset={SITE.charset} />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <meta name="generator" content={Astro.generator} />
  <meta
    name="robots"
    content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1"
  />

  <!-- âœ¨ astro-seo pour toutes les balises SEO -->
  <SEO
    title={meta.title}
    titleTemplate={`%s | ${SITE.title}`}
    description={meta.description}
    canonical={canonicalURL}
    openGraph={{
      basic: {
        title: meta.metaTitle,
        type: meta.type === "article" ? "article" : "website",
        image: OGImage,
        url: canonicalURL,
      },
      optional: {
        description: meta.description,
        siteName: SITE.title,
        locale: "he_IL",
      },
      ...(isArticleMeta(meta) && {
        article: {
          publishedTime: new Date(meta.publishedTime).toISOString(),
          modifiedTime: new Date(meta.lastModified).toISOString(),
          authors: meta.authors.map(
            (author) => `${Astro.site}authors/${author.link}`,
          ),
        },
      }),
    }}
    twitter={{
      card: "summary_large_image",
      site: SITE.title,
      title: meta.metaTitle,
      description: meta.description,
      image: OGImage,
      imageAlt: meta.ogImageAlt,
    }}
    extend={{
      meta: [
        {
          name: "google-site-verification",
          content: "7ukDuvGs_biEzOc41_DLPmQotzKzJkrVvpQCKqLoGBM",
        },
        {
          name: "impact-site-verification",
          content: "4698de27-0b12-448d-84b6-e8b7f98bc746",
        },
        { name: "apple-mobile-web-app-title", content: "Astro News" },
        ...(isArticleMeta(meta)
          ? meta.authors.map((author) => ({
              name: "author",
              content: author.name,
            }))
          : []),
      ],
      link: [
        {
          rel: "icon",
          type: "image/png",
          href: "/tech_favicon.png",
          sizes: "96x96",
        },
        { rel: "icon", type: "image/svg+xml", href: "/fav.svg" },
        { rel: "shortcut icon", href: "/fav.ico" },
        {
          rel: "apple-touch-icon",
          sizes: "180x180",
          href: "/apple-touch-icon.png",
        },
        { rel: "manifest", href: "/site.webmanifest" },
        { rel: "sitemap", href: "/sitemap-index.xml" },
        {
          rel: "alternate",
          type: "application/rss+xml",
          title: SITE.title,
          href: new URL("rss.xml", Astro.site).href,
        },
      ],
    }}
  />

  <!-- ðŸš€ PRÃ‰CHARGEMENT CSS CRITIQUE -->
  <link
    rel="preload"
    href="/_astro/_page_.DH_Rpls4.css"
    as="style"
    onload="this.onload=null;this.rel='stylesheet'"
  />
  <noscript>
    <link rel="stylesheet" href="/_astro/_page_.DH_Rpls4.css" />
  </noscript>

  <!-- ðŸš€ PRÃ‰CHARGEMENT FONTS CRITIQUES -->
  <link
    rel="preload"
    href="/_astro/source-saâ€¦.tpsLXCSJ.woff2"
    as="font"
    type="font/woff2"
    crossorigin
  />
  <link
    rel="preload"
    href="/_astro/source-saâ€¦.BM2CBz6W.woff2"
    as="font"
    type="font/woff2"
    crossorigin
  />

  <!-- ðŸš€ PRÃ‰CONNEXION OPTIMISÃ‰E -->
  <link rel="preconnect" href="https://cdn.sanity.io" />
  <link rel="dns-prefetch" href="https://cdn.sanity.io" />
  <link rel="preconnect" href="https://analytics.ahrefs.com" />

  {
    isArticleMeta(meta) && article ? (
      <StructuredData article={article} readingTime={readingTime} />
    ) : null
  }

  <!-- ðŸš€ CHARGEMENT FONTS NON-BLOQUANT -->
  <link
    rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600;700&family=Source+Serif+4:opsz,wght@8..60,200..900&display=swap"
    media="print"
    onload="this.media='all'"
  />
  <noscript>
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600;700&family=Source+Serif+4:opsz,wght@8..60,200..900&display=swap"
    />
  </noscript>

  <ClientRouter />

  <!-- ðŸš€ AHREFS ANALYTICS SEULEMENT - Chargement diffÃ©rÃ© -->
  <script>
    let ahrefsLoaded = false;

    function loadAhrefs() {
      if (ahrefsLoaded) return;
      ahrefsLoaded = true;

      // Ahrefs Analytics seulement
      const ahrefsScript = document.createElement("script");
      ahrefsScript.src = "https://analytics.ahrefs.com/analytics.js";
      ahrefsScript.setAttribute("data-key", "fNbl74Cz0zyN4NtzpNBdKg");
      ahrefsScript.async = true;
      document.head.appendChild(ahrefsScript);

      console.log("âœ… Ahrefs Analytics loaded");
    }

    // Charger aprÃ¨s interaction ou fallback 2 secondes
    ["scroll", "click", "touchstart", "keydown"].forEach((event) => {
      document.addEventListener(event, loadAhrefs, { once: true });
    });
    setTimeout(loadAhrefs, 2000);
  </script>
</head>
