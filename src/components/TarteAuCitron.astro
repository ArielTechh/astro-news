<!-- Bannière de consentement avec AdSense retardé de 7+ secondes -->
<div
  id="consent-banner"
  style="
  position: fixed; 
  bottom: 0; 
  left: 0; 
  right: 0; 
  background: #1a1a1a; 
  color: white; 
  padding: 1rem; 
  z-index: 10000;
  display: none;
"
>
  <div
    style="max-width: 1200px; margin: 0 auto; display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;"
  >
    <p style="margin: 0; flex: 1; min-width: 200px;">
      We use cookies to improve your experience.
      <a href="/privacy-policy" style="color: #60a5fa;">Privacy Policy</a>
    </p>
    <div style="display: flex; gap: 0.5rem;">
      <button
        id="consent-accept"
        style="
        background: #16a34a; 
        color: white; 
        border: none; 
        padding: 0.5rem 1rem; 
        border-radius: 4px; 
        cursor: pointer;
      "
        >Accept All</button
      >
      <button
        id="consent-reject"
        style="
        background: #dc2626; 
        color: white; 
        border: none; 
        padding: 0.5rem 1rem; 
        border-radius: 4px; 
        cursor: pointer;
      "
        >Reject All</button
      >
    </div>
  </div>
</div>

<script is:inline>
  (function () {
    "use strict";

    // Configuration
    const COOKIE_NAME = "user-consent";
    const COOKIE_DURATION = 365;
    const ADSENSE_DELAY_MIN = 7000; // 7 secondes minimum
    const ADSENSE_DELAY_MAX = 15000; // 15 secondes maximum
    const SCROLL_THRESHOLD = 200; // pixels de scroll avant déclenchement

    // GTM Setup
    window.dataLayer = window.dataLayer || [];
    function gtag() {
      dataLayer.push(arguments);
    }

    // Consentement par défaut (refusé)
    gtag("consent", "default", {
      analytics_storage: "denied",
      ad_storage: "denied",
      functionality_storage: "denied",
      personalization_storage: "denied",
      ad_user_data: "denied",
      ad_personalization: "denied",
      security_storage: "granted",
    });

    // Fonctions utilitaires
    function setCookie(name, value, days) {
      const expires = new Date(Date.now() + days * 864e5).toUTCString();
      document.cookie = `${name}=${value}; expires=${expires}; path=/; SameSite=Lax`;
    }

    function getCookie(name) {
      return document.cookie
        .split("; ")
        .find((row) => row.startsWith(name + "="))
        ?.split("=")[1];
    }

    function hideBanner() {
      const banner = document.getElementById("consent-banner");
      if (banner) banner.style.display = "none";
    }

    function showBanner() {
      const banner = document.getElementById("consent-banner");
      if (banner) banner.style.display = "block";
    }

    // ✅ NOUVELLE SOLUTION : AdSense avec délai minimum de 7 secondes
    let adSenseActivated = false;
    let consentGiven = false;
    let pageLoadTime = Date.now();
    let userScrolled = false;
    let adSenseTimer = null;

    // Fonction pour charger AdSense de manière différée
    function loadAdSense() {
      if (window.adSenseLoaded || adSenseActivated) return;

      adSenseActivated = true;
      console.log("📥 Loading AdSense script (delayed)...");

      const script = document.createElement("script");
      script.src =
        "https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-1113800966089168";
      script.async = true;
      script.crossOrigin = "anonymous";

      // Ajouter defer pour encore plus de retard
      script.defer = true;

      script.onload = () => {
        window.adSenseLoaded = true;
        console.log("✅ AdSense loaded after delay - initializing ads...");

        // Attendre encore un peu avant d'initialiser les pubs
        setTimeout(() => {
          const ads = document.querySelectorAll("ins.adsbygoogle");
          console.log(`Found ${ads.length} ads to initialize`);

          ads.forEach((ad, index) => {
            try {
              // Initialiser une pub à la fois avec délai
              setTimeout(() => {
                (window.adsbygoogle = window.adsbygoogle || []).push({});
                console.log(`Ad ${index + 1} initialized`);
              }, index * 500); // 500ms entre chaque pub
            } catch (e) {
              console.error(`AdSense push error for ad ${index}:`, e);
            }
          });
        }, 1000); // 1 seconde supplémentaire avant initialisation
      };

      script.onerror = () => {
        console.error("❌ AdSense failed to load");
      };

      document.head.appendChild(script);
    }

    // Nouvelle fonction pour gérer le délai intelligent
    function scheduleAdSense() {
      if (!consentGiven || adSenseActivated) return;

      console.log("📋 Scheduling AdSense with intelligent delay...");

      // Calculer le temps écoulé depuis le chargement
      const elapsedTime = Date.now() - pageLoadTime;
      const minimumWait = Math.max(0, ADSENSE_DELAY_MIN - elapsedTime);

      console.log(
        `Time elapsed: ${elapsedTime}ms, minimum wait: ${minimumWait}ms`,
      );

      // Écouter le scroll de l'utilisateur
      const scrollHandler = () => {
        if (window.scrollY > SCROLL_THRESHOLD) {
          userScrolled = true;
          console.log("👆 User scrolled past threshold");
          window.removeEventListener("scroll", scrollHandler);

          // Si on a déjà attendu assez longtemps, charger immédiatement
          if (elapsedTime >= ADSENSE_DELAY_MIN) {
            loadAdSense();
          }
        }
      };

      window.addEventListener("scroll", scrollHandler, { passive: true });

      // Timer principal : au minimum après ADSENSE_DELAY_MIN
      adSenseTimer = setTimeout(() => {
        console.log("⏰ Minimum delay reached");

        if (userScrolled) {
          // L'utilisateur a scrollé ET le délai minimum est écoulé
          console.log("🚀 Loading AdSense (user engaged + delay complete)");
          loadAdSense();
        } else {
          // L'utilisateur n'a pas scrollé, attendre plus longtemps
          console.log("⏳ User not engaged, waiting longer...");

          setTimeout(() => {
            console.log("🚀 Loading AdSense (maximum delay reached)");
            loadAdSense();
          }, ADSENSE_DELAY_MAX - ADSENSE_DELAY_MIN);
        }
      }, minimumWait);
    }

    // Chargement des services (OPTIMISÉ)
    function loadServices() {
      console.log("🚀 Loading GTM immediately...");

      // GTM en priorité (immédiat)
      if (!window.gtmLoaded) {
        (function (w, d, s, l, i) {
          w[l] = w[l] || [];
          w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
          var f = d.getElementsByTagName(s)[0],
            j = d.createElement(s),
            dl = l != "dataLayer" ? "&l=" + l : "";
          j.async = true;
          j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
          f.parentNode.insertBefore(j, f);
        })(window, document, "script", "dataLayer", "GTM-PQC6K9BZ");
        window.gtmLoaded = true;
      }

      // AdSense : TOUJOURS avec délai intelligent
      scheduleAdSense();
    }

    // Gestion du consentement
    function handleConsent(accepted) {
      setCookie(
        COOKIE_NAME,
        accepted ? "accepted" : "rejected",
        COOKIE_DURATION,
      );
      hideBanner();

      if (accepted) {
        consentGiven = true;

        gtag("consent", "update", {
          analytics_storage: "granted",
          ad_storage: "granted",
          functionality_storage: "granted",
          personalization_storage: "granted",
          ad_user_data: "granted",
          ad_personalization: "granted",
        });

        loadServices();

        dataLayer.push({
          event: "consent_granted",
          page_path: window.location.pathname,
          timestamp: Date.now(),
        });

        console.log("✅ Consent accepted - AdSense scheduled with delay");
      } else {
        // Annuler le timer AdSense si l'utilisateur refuse
        if (adSenseTimer) {
          clearTimeout(adSenseTimer);
          adSenseTimer = null;
        }

        dataLayer.push({
          event: "consent_rejected",
          page_path: window.location.pathname,
          timestamp: Date.now(),
        });
        console.log("❌ Consent rejected - AdSense cancelled");
      }
    }

    // Initialisation
    function init() {
      const consent = getCookie(COOKIE_NAME);

      if (consent === "accepted") {
        consentGiven = true;
        handleConsent(true);
      } else if (consent === "rejected") {
        console.log("ℹ️ Consent previously rejected");
      } else {
        showBanner();
      }

      // Event listeners
      const acceptBtn = document.getElementById("consent-accept");
      const rejectBtn = document.getElementById("consent-reject");

      if (acceptBtn) {
        acceptBtn.addEventListener("click", () => handleConsent(true));
      }

      if (rejectBtn) {
        rejectBtn.addEventListener("click", () => handleConsent(false));
      }
    }

    // Démarrage avec mesure du temps
    pageLoadTime = Date.now();

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", init);
    } else {
      init();
    }

    // Debug : afficher les stats après 30 secondes
    setTimeout(() => {
      console.log("📊 Debug stats:", {
        pageLoadTime: new Date(pageLoadTime).toISOString(),
        consentGiven,
        userScrolled,
        adSenseActivated,
        adSenseLoaded: !!window.adSenseLoaded,
        timeElapsed: Date.now() - pageLoadTime,
      });
    }, 30000);
  })();
</script>

<!-- GTM noscript fallback -->
<noscript>
  <iframe
    src="https://www.googletagmanager.com/ns.html?id=GTM-PQC6K9BZ"
    height="0"
    width="0"
    style="display:none;visibility:hidden"></iframe>
</noscript>
