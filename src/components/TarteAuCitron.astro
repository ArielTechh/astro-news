<!-- Bannière de consentement ultra-légère avec AdSense lazy -->
<div
  id="consent-banner"
  style="
  position: fixed; 
  bottom: 0; 
  left: 0; 
  right: 0; 
  background: #1a1a1a; 
  color: white; 
  padding: 1rem; 
  z-index: 10000;
  display: none;
"
>
  <div
    style="max-width: 1200px; margin: 0 auto; display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;"
  >
    <p style="margin: 0; flex: 1; min-width: 200px;">
      We use cookies to improve your experience.
      <a href="/privacy-policy" style="color: #60a5fa;">Privacy Policy</a>
    </p>
    <div style="display: flex; gap: 0.5rem;">
      <button
        id="consent-accept"
        style="
        background: #16a34a; 
        color: white; 
        border: none; 
        padding: 0.5rem 1rem; 
        border-radius: 4px; 
        cursor: pointer;
      "
        >Accept All</button
      >
      <button
        id="consent-reject"
        style="
        background: #dc2626; 
        color: white; 
        border: none; 
        padding: 0.5rem 1rem; 
        border-radius: 4px; 
        cursor: pointer;
      "
        >Reject All</button
      >
    </div>
  </div>
</div>

<script is:inline>
  (function () {
    "use strict";

    // Configuration
    const COOKIE_NAME = "user-consent";
    const COOKIE_DURATION = 365; // jours

    // GTM Setup
    window.dataLayer = window.dataLayer || [];
    function gtag() {
      dataLayer.push(arguments);
    }

    // Consentement par défaut (refusé)
    gtag("consent", "default", {
      analytics_storage: "denied",
      ad_storage: "denied",
      functionality_storage: "denied",
      personalization_storage: "denied",
      ad_user_data: "denied",
      ad_personalization: "denied",
      security_storage: "granted",
    });

    // Fonctions utilitaires
    function setCookie(name, value, days) {
      const expires = new Date(Date.now() + days * 864e5).toUTCString();
      document.cookie = `${name}=${value}; expires=${expires}; path=/; SameSite=Lax`;
    }

    function getCookie(name) {
      return document.cookie
        .split("; ")
        .find((row) => row.startsWith(name + "="))
        ?.split("=")[1];
    }

    function hideBanner() {
      const banner = document.getElementById("consent-banner");
      if (banner) {
        banner.style.display = "none";
      }
    }

    function showBanner() {
      const banner = document.getElementById("consent-banner");
      if (banner) {
        banner.style.display = "block";
      }
    }

    // ✅ CLASSE POUR ADSENSE LAZY LOADING
    class AdSenseLazy {
      static loaded = false;
      static placeholders = new Set();
      static observer = null;

      // Créer un placeholder pour les pubs
      static createAdPlaceholder(container) {
        // Ajouter les styles une seule fois
        this.ensureStyles();

        const placeholder = document.createElement("div");
        placeholder.className = "adsense-lazy-placeholder";

        placeholder.innerHTML = `
          <div class="adsense-lazy-content">
            <div class="adsense-lazy-icon">
              <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
              </svg>
            </div>
            <h3 class="adsense-lazy-title">Publicité</h3>
            <p class="adsense-lazy-subtitle">Chargement automatique...</p>
          </div>
          <div class="adsense-lazy-shimmer"></div>
        `;

        return placeholder;
      }

      // Ajouter les styles CSS isolés une seule fois
      static ensureStyles() {
        if (document.getElementById("adsense-lazy-styles")) return;

        const style = document.createElement("style");
        style.id = "adsense-lazy-styles";
        style.textContent = `
          .adsense-lazy-placeholder {
            background: linear-gradient(135deg, #f3f4f6, #e5e7eb) !important;
            border: 2px dashed #d1d5db !important;
            border-radius: 8px !important;
            padding: 2rem !important;
            text-align: center !important;
            color: #6b7280 !important;
            font-family: system-ui, -apple-system, sans-serif !important;
            margin: 1rem 0 !important;
            position: relative !important;
            overflow: hidden !important;
            cursor: pointer !important;
            transition: all 0.3s ease !important;
            box-sizing: border-box !important;
          }
          
          .adsense-lazy-placeholder:hover {
            border-color: #9ca3af !important;
            background: linear-gradient(135deg, #e5e7eb, #d1d5db) !important;
          }
          
          .adsense-lazy-content {
            position: relative !important;
            z-index: 1 !important;
          }
          
          .adsense-lazy-icon {
            width: 48px !important;
            height: 48px !important;
            margin: 0 auto 1rem !important;
            background: #d1d5db !important;
            border-radius: 50% !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
          }
          
          .adsense-lazy-title {
            margin: 0 0 0.5rem 0 !important;
            font-size: 1.1rem !important;
            font-weight: 600 !important;
            color: inherit !important;
          }
          
          .adsense-lazy-subtitle {
            margin: 0 !important;
            font-size: 0.9rem !important;
            opacity: 0.8 !important;
            color: inherit !important;
          }
          
          .adsense-lazy-shimmer {
            position: absolute !important;
            top: 0 !important;
            left: -100% !important;
            height: 100% !important;
            width: 100% !important;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent) !important;
            animation: adsense-shimmer 2s infinite !important;
          }
          
          @keyframes adsense-shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
          }
          
          /* Isolation pour éviter les conflits */
          .adsense-lazy-placeholder * {
            box-sizing: border-box !important;
          }
        `;
        document.head.appendChild(style);
      }

      // Initialiser l'Intersection Observer pour AdSense
      static initObserver() {
        if (this.observer || !("IntersectionObserver" in window)) return;

        this.observer = new IntersectionObserver(
          (entries) => {
            entries.forEach(async (entry) => {
              if (entry.isIntersecting) {
                const placeholder = entry.target;
                this.observer.unobserve(placeholder);
                await this.loadAdSense();
                this.replaceWithAd(placeholder);
              }
            });
          },
          {
            rootMargin: "200px 0px", // Charger 200px avant d'être visible
            threshold: 0.1,
          },
        );
      }

      // Charger le script AdSense une seule fois
      static async loadAdSense() {
        if (this.loaded) return;

        return new Promise((resolve, reject) => {
          const adScript = document.createElement("script");
          adScript.src =
            "https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-1113800966089168";
          adScript.async = true;
          adScript.crossOrigin = "anonymous";

          adScript.onload = () => {
            this.loaded = true;
            console.log("✅ AdSense script loaded on demand");
            resolve();
          };

          adScript.onerror = () => {
            console.error("❌ Failed to load AdSense");
            reject();
          };

          document.head.appendChild(adScript);
        });
      }

      // Remplacer le placeholder par une vraie pub
      static replaceWithAd(placeholder) {
        try {
          // Créer l'élément pub AdSense avec les attributs originaux
          const adElement = document.createElement("ins");
          adElement.className = "adsbygoogle";
          adElement.style.cssText = "display: block !important;";

          // Utiliser les attributs stockés sur le placeholder
          adElement.setAttribute(
            "data-ad-client",
            placeholder.dataset.adClient || "ca-pub-1113800966089168",
          );
          adElement.setAttribute(
            "data-ad-slot",
            placeholder.dataset.adSlot || "auto",
          );
          adElement.setAttribute(
            "data-ad-format",
            placeholder.dataset.adFormat || "auto",
          );
          adElement.setAttribute(
            "data-full-width-responsive",
            placeholder.dataset.adResponsive || "true",
          );

          // Remplacer le placeholder
          placeholder.parentNode.replaceChild(adElement, placeholder);

          // Initialiser la pub
          if (window.adsbygoogle) {
            (window.adsbygoogle || []).push({});
          }

          console.log("✅ AdSense ad initialized with original attributes");
        } catch (error) {
          console.error("❌ Error initializing AdSense ad:", error);

          // En cas d'erreur, créer un message d'erreur isolé
          const errorDiv = document.createElement("div");
          errorDiv.style.cssText = `
            color: #ef4444 !important;
            padding: 1rem !important;
            text-align: center !important;
            background: #fef2f2 !important;
            border: 1px solid #fecaca !important;
            border-radius: 4px !important;
            margin: 1rem 0 !important;
            font-family: system-ui, -apple-system, sans-serif !important;
          `;
          errorDiv.innerHTML =
            '<p style="margin: 0 !important;">Impossible de charger la publicité</p>';

          placeholder.parentNode.replaceChild(errorDiv, placeholder);
        }
      }

      // Activer le lazy loading pour toutes les pubs existantes
      static activateAll() {
        this.initObserver();

        // ✅ SEULEMENT remplacer les pubs AdSense existantes (ins.adsbygoogle)
        const existingAds = document.querySelectorAll("ins.adsbygoogle");
        existingAds.forEach((ad) => {
          // Créer un placeholder qui remplace la pub
          const placeholder = this.createAdPlaceholder();

          // Copier les attributs data-* de l'ancienne pub
          const attributes = {
            client:
              ad.getAttribute("data-ad-client") || "ca-pub-1113800966089168",
            slot: ad.getAttribute("data-ad-slot") || "auto",
            format: ad.getAttribute("data-ad-format") || "auto",
            responsive: ad.getAttribute("data-full-width-responsive") || "true",
          };

          // Stocker les attributs sur le placeholder pour plus tard
          placeholder.dataset.adClient = attributes.client;
          placeholder.dataset.adSlot = attributes.slot;
          placeholder.dataset.adFormat = attributes.format;
          placeholder.dataset.adResponsive = attributes.responsive;

          // Remplacer la pub par le placeholder
          ad.parentNode.replaceChild(placeholder, ad);

          // Observer le placeholder
          if (this.observer) {
            this.observer.observe(placeholder);
          }
        });

        console.log(
          `✅ Converted ${existingAds.length} existing AdSense ads to lazy loading`,
        );
      }

      // ❌ SUPPRIMER l'auto-détection qui ajoutait des pubs partout
      // static autoDetectAdSlots() { ... } <- SUPPRIMÉ
    }

    // Chargement des services après consentement (OPTIMISÉ)
    function loadServices() {
      console.log("🚀 Loading analytics...");

      // GTM (gardé immédiat car plus léger)
      if (!window.gtmLoaded) {
        (function (w, d, s, l, i) {
          w[l] = w[l] || [];
          w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
          var f = d.getElementsByTagName(s)[0],
            j = d.createElement(s),
            dl = l != "dataLayer" ? "&l=" + l : "";
          j.async = true;
          j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
          f.parentNode.insertBefore(j, f);
        })(window, document, "script", "dataLayer", "GTM-PQC6K9BZ");
        window.gtmLoaded = true;
      }

      // ✅ AdSense maintenant en lazy loading au lieu de chargement immédiat
      setTimeout(() => {
        AdSenseLazy.activateAll();
        console.log("✅ AdSense lazy loading activated");
      }, 1000); // Petit délai pour ne pas bloquer la page
    }

    // Gestion du consentement (inchangée)
    function handleConsent(accepted) {
      setCookie(
        COOKIE_NAME,
        accepted ? "accepted" : "rejected",
        COOKIE_DURATION,
      );
      hideBanner();

      if (accepted) {
        // Mise à jour du consentement GTM
        gtag("consent", "update", {
          analytics_storage: "granted",
          ad_storage: "granted",
          functionality_storage: "granted",
          personalization_storage: "granted",
          ad_user_data: "granted",
          ad_personalization: "granted",
        });

        // Chargement des services (maintenant optimisé)
        loadServices();

        // Event pour le tracking
        dataLayer.push({
          event: "consent_granted",
          page_path: window.location.pathname,
        });

        console.log("✅ Consent accepted - lazy services activated");
      } else {
        dataLayer.push({
          event: "consent_rejected",
          page_path: window.location.pathname,
        });
        console.log("❌ Consent rejected - no tracking");
      }
    }

    // Initialisation au chargement de la page
    function init() {
      const consent = getCookie(COOKIE_NAME);

      if (consent === "accepted") {
        // Consentement déjà donné
        handleConsent(true);
      } else if (consent === "rejected") {
        // Consentement déjà refusé
        console.log("ℹ️ Consent previously rejected");
      } else {
        // Première visite - afficher la bannière
        showBanner();
      }

      // Event listeners pour les boutons
      const acceptBtn = document.getElementById("consent-accept");
      const rejectBtn = document.getElementById("consent-reject");

      if (acceptBtn) {
        acceptBtn.addEventListener("click", () => handleConsent(true));
      }

      if (rejectBtn) {
        rejectBtn.addEventListener("click", () => handleConsent(false));
      }
    }

    // Démarrage quand le DOM est prêt
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", init);
    } else {
      init();
    }
  })();
</script>

<!-- GTM noscript fallback -->
<noscript>
  <iframe
    src="https://www.googletagmanager.com/ns.html?id=GTM-PQC6K9BZ"
    height="0"
    width="0"
    style="display:none;visibility:hidden"></iframe>
</noscript>
